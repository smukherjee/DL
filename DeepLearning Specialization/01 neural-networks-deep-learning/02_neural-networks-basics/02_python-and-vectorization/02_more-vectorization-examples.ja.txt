前回のビデオでは
組み込み関数を使って for loop を避けて
ベクトル化することで コードをかなり高速化できる例を
見てきました もう少し例を見てみましょう 覚えておくべき教訓は
ニューラルネットワークをプログラムする時や ロジステック回帰をプログラムするときは
可能な限り for loop を避けることです for loop を避けるのは
いつも可能なわけではないですが 組み込み関数を使ったり
可能なかぎり他の計算方法を探すと for loop を使うよりも
たいがいは速くなります 開始点から theta を増加させるというのは、これも意図通りの動作のようです。 ベクトルu を行列AとベクトルVの 積を求めたいとすると
行列積の定義は uiはjで合計した
AijとVjの積です このようにuiの式を作ります これをベクトル化しない方法で
実装すると u=np.zeros((n,1))となり for i と続き for j と続きます そしてu[i]+=A[i][j]*v[j]です これにはi とj を
繰り返す２重のループがあります これがベクトル化しないコードです ベクトル化するコードでは
u=np.dot(A,v)です 右側のベクトル化版の実装では ２つのfor loop を排除できるので
かなり速いでしょう もう１つ例を見てみましょう ベクトルv がメモリ上にあるとします ベクトルv の全要素に
指数演算を実行しようとしています uにはベクトルのv1の指数関数e v2の指数関数eから
vnの指数関数eまで続きます ベクトル化しない実装は
こんなコードになります 最初にu を
０で初期化されたベクトルにします 次にfor loop を使って
要素を１つずつ計算します Python のnumpy には
多くの組み込み関数があり ただ１つの関数を１度呼ぶだけで
ベクトルを計算できます このため私だったら
このように実装します import numpy as np と書き u = np.exp(v) を
呼ぶだけです このように前の例では
for loop を書きましたが こちらのたった１行のコードでは
v を入力のベクトルに指定しu を出力のベクトルに指定しました for loop の部分を排除しました 右側の実装のほうがfor loop を必要とする実装よりも
かなり高速です 実はnumpy ライブラリには
他にも多くのベクトル値処理関数があります np.log(v) は
要素ごとのlog を実行します np.abs は
要素ごとの絶対値を計算し np.maximum は
要素ごとにmaximum を計算します v の各要素に対して
0以上の最大値を出します v**2 では各要素に対して
v の２乗を出します 1/v では各要素の逆数を
計算します なのでfor loop を
書きたいと思った時は for loop なしで出来ないか
numpy の組み込み関数がないか常に確認しましょう これらの学習したことを使って ロジステック回帰の勾配降下法の実装に
適用してみましょう for loop を１つでも２つでも
排除できないかやってみましょう このコードが ロジステック回帰の微分を計算するもので
２つのfor loop があります １つ目はここで
２つ目はここです この例では
nx=2ですが もし３以上の特徴量が
あったとしたら for loop を使って
dw1、dw2、dw3 と計算する必要があります 実際にはfor i=1からnxのように
書いているのと同じです そしてdwj を更新します この２つ目のfor loop を
排除したいと思います このスライドで実行します これのやり方は
dw1、dw2を それぞれ０に初期化するコードを
書くのではなく これを排除して
dw をベクトルにします dw=np.zeros((n_x,1))と書き 次元を持つ配列にします 個々の要素に対して 実行するここのloop の替わりに このベクトル演算命令を使います dw+=x(i)かけるdz(i)と
書きます そして最後に
これの替わりに dw/=m と書きます このように２つのfor loop から
１つに変えました まだこのfor loop があり
トレーニングデータをループしています このビデオによって
ベクトル化を理解してもらいたいです １つのfor loop を排除することで
コードは速く動作するはずです ただもっと良くすることができます 次のビデオでは ロジステック回帰を
さらにベクトル化する方法を話します ひどくはね かなり驚きの結果を見ることになります for loop を使う方法で
トレーニングデータを処理する必要なく 全トレーニングデータを処理するコードを
書けるのです いつでも同じ方法で
使うことができます 次のビデオでは
これを見てみましょう