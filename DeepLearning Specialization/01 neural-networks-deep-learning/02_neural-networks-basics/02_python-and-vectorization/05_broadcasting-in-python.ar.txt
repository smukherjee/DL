في الفيديو السابق،
أشرت إلى أن البث أسلوب آخر يمكنك استخدامه لتشغيل
التعليمات البرمجية في بايثون بصورة أسرع. في هذا الفيديو، دعونا نخوض
في كيفية عمل البث في بايثون. دعونا نمهد لأهمية البث
اليوم بمثال. في هذه المصفوفة، أظهرت عدد
السعرات الحرارية من الكربوهيدرات، والبروتينات، والدهون في 100
جرام من أربعة أطعمة مختلفة. على سبيل المثال، يحتوي
100 جرام من التفاح، على 56 سُعرًا حراريًا من الكربوهيدرات،
وأقل بكثير من البروتينات والدهون. بينما في المقابل، 100 جرام من اللحم البقري
تحتوي 104 سعرات حرارية من البروتين و135 سُعرًا حراريًا من الدهون. الآن، دعنا نقول أن هدفك هو
حساب النسبة المئوية للسعرات الحرارية من الكربوهيدرات والبروتينات
والدهون لكل من الأطعمة الأربعة. هكذا، على سبيل المثال،
إذا كنت تبحث في هذا العمود وجمعت الأرقام في هذا العمود،
فسترى أن 100 جرام من التفاح تحتوي على 56 زائد 1,2 زائد 1,8،
وهذا يساوي 59 سُعرًا حراريًا. وذلك كنسبة مئوية، نسبة السعرات الناتجة من الكربوهيدرات
في تفاحة سيكون 56 على 59، وهذا تقريبًا 94,9%. حيث إن معظم السعرات الحرارية
في تفاحة يأتي من الكربوهيدرات، بينما أغلب السعرات الحرارية الناتجة من
اللحم تأتي من البروتين والدهون وهكذا. إذًا، فإن العملية الحسابية التي تريدها
هي حقًا جمع كل من الأعمدة الأربعة لهذه المصفوفة للحصول على إجمالي عدد
السعرات الحرارية في 100 جرام من التفاح ولحم البقر والبيض والبطاطس. ومن ثم تقسيم جميع أعمدة المصفوفة، للحصول على النسبة المئوية للسعرات
الحرارية من الكربوهيدرات والبروتينات والدهون لكل من الأطعمة الأربعة. السؤال هو، هل يمكنك القيام بذلك
دون استخدام حلقة for-loop صريحة؟ دعونا نلقي نظرة على
كيفية القيام بذلك. سوف أوضح لك كيف
يمكنك تعيين، مثلاً هذه المصفوفة التي
تساوي 4*3، المصفوفة A ومن ثم بسطر واحد من تعليمات
بايثون البرمجية، سوف نجمع الأعمدة. إذًا، سنحصل على أربعة أرقام
تقابل العدد الإجمالي للسعرات الحرارية في هذه الأنواع
الأربعة المختلفة من الأطعمة، 100 جرام من هذه الأنواع
الأربعة المختلفة من الأطعمة. وسوف أستخدم سطرًا ثانيًا من تعليمات
بايثون البرمجية لتقسيم كل عمود من الأعمدة الأربعة حسب
مجموعها المقابل. إذا لم يكن هذا الوصف
اللفظي واضحًا تمامًا، آمل أن يكون أكثر وضوحًا بعد قليل
عندما ننظر في تعليمات بايثون البرمجية. ها نحن في دفتر Jupyter Notebook. لقد سبق أن كتبت هذه الجزئية الأولى
من التعليمات البرمجية لتعبئة المصفوفة A مسبقًا بالأرقام التي لدينا،
لذا سوف نضغط على Shift + Enter ونقوم فقط بتشغيل هذا، وهذه مصفوفة A أمامنا. والآن إليك هذين السطرين من
تعليمات بايثون البرمجية. أولاً، سنقوم بحساب tau
تساوي a، هذا المبلغ. وx يساوي 0، مما يعني الجمع بشكل رأسي. سنقول المزيد عن ذلك بعد قليل. ثم قم بطباعة cal. إذًا، سنقوم بالجمع عموديًا. الآن 59 هو العدد الإجمالي للسعرات
الحرارية في التفاحة، وكان 239 العدد الإجمالي للسعرات الحرارية في اللحم،
ومن ثم البيض فالبطاطس وهكذا. ومن ثم مع حساب النسبة المئوية تساوي (1,4)A / cal.reshape فعليًا، نريد النسب المئوية،
لذا نضرب 100 هنا. ومن ثم، نطبع النسبة المئوية. لنقم بتشغيله. وباستخدام هذا الأمر،
أخذنا المصفوفة A وقسمناها على مصفوفة 1/4 هذه، وهذا يعطينا مصفوفة
من النسب المئوية. إذًا كما أوجدنا النسبة
المئوية للتفاح يدويًا، كان أول عمود 94,9% من
السعرات الحرارية من الكربوهيدرات. فلنعد إلى الشرائح. إذًا، لتكرار سطري التعليمات
البرمجية لدينا، هذا ما قد كتبته في
ملف Jupyter Notebook. لإضافة قليل من التفاصيل، هذا المتغير، (المحور = 0)، يعني أنك تريد أن
يقوم بايثون بالجمع عموديًا. وبالتالي، إذا كان هذا المحور 0،
فهذا يعني أن الجمع عمودي، حيث المحور الأفقي هو المحور 1. إذًا، كتابة المحور 1 أو الجمع أفقيًا
بدلاً من الجمع عموديًا. ومن ثم هذا الأمر هنا، هذا مثال لبث بايثون
حيث تأخذ مصفوفة A. إذًا، هذه مصفوفة 3*4 وأنت
تقسمها على مصفوفة 1*4. وفعليًا، بعد هذا السطر الأول من
التعليمات البرمجية cal، المتغير cal عبارة عن مصفوفة 4*1 بالفعل. إذًا، من الناحية الفنية لا تحتاج إلى استدعاء
إعادة التشكيل هنا مرة أخرى، لذا هذا في الواقع زائد عن الحاجة. ولكن عند كتابة تعليمات بايثون البرمجية،
إذا لم أكن متأكدًا تمامًا من تكوين المصفوفة، ومن أبعاد المصفوفة، فغالبًا ما
أستخدم أمر إعادة التشكيل reshape فقط للتأكد من أن متجه
العمود أو متجه الصف أو أيًا ما كان بالشكل الذي تريده. أمر إعادة التشكيل reshape ذو وقت ثابت. يتكون من عملية واحدة، وهذا لا يستهلك
وقتًا أو ذاكرة كبيرة على الإطلاق. لذا لا تخجل من استخدام أمر إعادة
التشكيل reshape للتأكد من أن مصفوفاتك بالحجم الذي تريده. الآن، دعنا نشرح بمزيد من التفصيل كيفية
عمل هذا النوع من العمليات، حسنًا؟ كان لدينا مصفوفة 4*3
وقسمناها على مصفوفة 4*1، إذًا، كيف يمكنك تقسيم
مصفوفة 4*3 على مصفوفة 4*1؟ أو على متجه 4*1؟ لنرى مزيدًا من
الأمثلة على البث. إذا أخذت متجه 4*1
وأضفته إلى عدد، فسيقوم بايثون بأخذ هذا
العدد وتمديده تلقائيًا إلى متجه 4*1 أيضًا،
على النحو التالي. إذًا، المتجه [1,2,3,4]، زائد العدد 100 سيتحول إلى
ذلك المتجه على اليمين. أنت تضيف 100 لكل عنصر،
وفي الواقع نحن نستخدم هذا الشكل من البث عندما كان الثابت هو
المتغير b في الفيديو السابق. وهذا النوع من البث يعمل مع
متجهات العمود ومتجهات الصف، وفي الواقع، في وقت سابق، كنا نستخدم
نموذجًا مماثلاً للبث مع الثابت الذي كنا نضيفه إلى متجه،
وهو المتغير b في الانحدار اللوجستي. هذا مثال آخر. فلنفترض أن لديك
مصفوفة 3*2 وتضيف إليها هذه المصفوفة التي شكلها N*1. وبالتالي ستكون الحالة العامة إذا كانت لديك مصفوفة شكلها (m,n) هنا وأضفتها إلى مصفوفة شكلها (n,1)، سيقوم بايثون بنسخ المصفوفة m، عدة مرات ليحوّل هذه إلى مصفوفة شكلها m*n،
لذا بدلاً من مصفوفة 1*3 هذه سوف ينسخها مرتين في
هذا المثال ليحولّها إلى هذا. أيضًا، مصفوفة 2*3.
وستقوم بإضافة هؤلاء حتى تصل إلى المجموع الذي
على اليمين، تمام؟ لقد أخذت وأضفت 100
إلى العمود الأول، وأضفت 200 إلى العمود الثاني،
و300 إلى العمود الثالث. وهذا أساسًا ما فعلناه
في الشريحة السابقة، إلا أننا استخدمنا عملية قسمة
بدلاً من عملية إضافة. مثال أخير، إن كانت
لديك مصفوفة (m,n) وأضفتها إلى متجه (1,m)،
أي مصفوفة (1,m). ثم نسخت هذا فقط n مرات أفقيًا. حتى ينتهي بك الأمر إلى مصفوفة (m,n). يمكنك تخيل نسخه
أفقيًا ثلاث مرات، ويمكنك إضافة تلك. إذًا، عند إضافتها سيصبح لدينا هذا في نهاية المطاف. لقد أضفنا 100 إلى الصف الأول
وأضفنا 200 إلى الصف الثاني. هذا هو المبدأ الأعم
عن البث في بايثون: إذا كانت لديك مصفوفة (m,n) وقمت بالإضافة أو الطرح أو الضرب أو القسمة
مع مصفوفة (n,1)، فسيؤدي هذا إلى نسخها n من
المرات إلى مصفوفة (m,n). ومن ثم تطبيق
الإضافة والطرح والضرب أو القسمة لكل عنصر. على العكس من ذلك، إذا كانت لديك مصفوفة (m,n)
وقمت بإضافة أو طرح أو ضرب أو قسمة على مصفوفة (m,1)، يتم
نسخ هذه الآن n من المرات أيضًا. وتتحول تلك إلى مصفوفة (m,n) ثم
يتم تطبيق العملية على جميع العناصر. شكل آخر من البث،
هو عندما تكون لديك مصفوفة (1,m)، وفعليًا يكون هذا متجه عمودي
مثل [1,2,3]، ومن ثم تضيف أو تطرح أو تضرب أو
تقسم على رقم صف. إذًا، ربما تكون مصفوفة (1,1)، مثل هذا زائد 100،
ثم تنتهي إلى نسخ هذا العدد الحقيقي n من المرات إلى
أن تحصل على مصفوفة (n,1) أخرى، ومن ثم يمكنك إجراء العملية، مثل الإضافة
في هذا المثال، لكل عنصر. وهناك شيء مماثل أيضًا
لمتجهات الصف. تستطيع النسخة العامة الكاملة للبث
أن تقوم بأكثر من ذلك بعض الشيء. إذا كنت مهتمًا،
يمكنك قراءة وثائق نمباي، والاطلاع على معلومات
البث في تلك الوثائق. سيعطيك ذلك تعريفًا أعم
.بعض الشيء عن البث. ولكن ما رأيته على الشرائح هي الأشكال
الرئيسية للبث التي ستحتاجها عندما تقوم بتنفيذ
شبكة عصبية. قبل الختام، هناك
تعليق أخير، وهو لمن اعتاد البرمجة باستخدام
إما MATLAB أو Octave، إذا كنت قد استخدمت في أي وقت مضى
دالة bsxfun في MATLAB أو OCTAVE في برمجة الشبكة العصبية، فإن bsxfun تقوم
بشي مشابه، ليس تمامًا نفس الشيء. ولكن غالبًا ما يتم استخدامها لغرض
مماثل لما نستخدم البث في بايثون له. ولكن هذا حقًا لا ينطبق إلا
على مستخدمي MATLAB وOctave المتقدمين جدًا، وإن لم تسمع
عن هذا من قبل، فلا تقلق بشأن ذلك. لا تحتاج إلى معرفته عندما تكتب التعليمات
البرمجية في الشبكات العصبية في بايثون. إذًا، هذا كان البث في بايثون، وآمل أنه عند قيامك بتدريبات البرمجة
أن يتيح لك البث ليس فقط تسريع تشغيل التعليمات البرمجية، بل أيضًا مساعدتك في الحصول على ما تريد
بعدد أقل من أسطر التعليمات البرمجية. قبل أن تخوض في تمرينات البرمجة،
أريد أن أشارك معك مجموعة إضافية من الأفكار،
وهي أن هناك بعض النصائح والأساليب التي وجدت أنها تقلل
عدد الأخطاء في برمجتي في بايثون والتي آمل أنها قد تساعدك أيضًا. لذا دعونا نتحدث عن
هذا في الفيديو التالي.