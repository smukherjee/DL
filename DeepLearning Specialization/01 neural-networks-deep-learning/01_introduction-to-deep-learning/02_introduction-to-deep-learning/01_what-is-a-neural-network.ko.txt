딥러닝 이라는 용어는 신경망의 트레이닝을 일컫는 말인데요, 가끔은 매우 큰 신경망을 의미하기도 합니다. 그럼 신경망이라고 하는 것은 정확히 무엇을 뜻하는 걸까요? 이번 비디오를 통해 몇가지 기본적이면서 직관적인 부분을 설명해드리도록 하겠습니다. 집값을 예측하는 툴을 예시로 살펴보도록 하겠습니다. 6개의 가구로 이루어져있는 데이터 세트가 있다고 해봅시다. 제곱 피트나 제곱티어 단위로 말이죠.
또한, 집값 또한 알고 있고 집 크기의 함수에 대입하여 미래 집값을 예측합니다. 그래서 만약 여러분이 linear regression에 익숙하시면, 여기 데이터에 일직선을 그으면
이런 선이 나올텐데요. 조금 더 멋있게 설명하자면 가격이 마이너스가 될 수는 없기 때문에 일직선이라고 표현하기보다는, 여기에 이렇게 커브로 바꾸어보도록 하겠습니다. 그러면 이 부분은 0이 되겠죠. 그렇게 해서 두꺼운 파란색 선은
미래의 집값을 예측하는, 집 크기를 변수로 하는 함수가 됩니다. 여기는 값이 0인 부분이고
그 다음 우측 부분은 일직선의 일차함수 선이 됩니다. 이렇게해서 방금 맞춰 놓은 집값 함수는 아주 간단한 신경망이란 비슷한 개념으로 생각하시면 됩니다. 가장 간단할 수 있는 신경망이라고 볼 수 있죠. 여기 한번 그려봅시다. 집의 크기를 나타내는 x값을 신경망의 입력값으로 지정하고 이 노드로 들어가는데요,
이렇게 생긴 원형 모양입니다. 이렇게 입력되어 y라는 결과 값이 나옵니다. 이 동그란 원은, 신경망에 있는
1개의 신경세포인데요, 왼쪽에 그린 이 함수를 도입시킵니다. 신경세포가 하는 것은 바로
크기를 입력값으로 갖고, 이 일차함수를 만드는 것이죠. 최대값 0을 갖고, 예상 가격을 결과값으로 추출하는 것입니다. 신경망 분야에서 이 함수를 많이 볼 수 있습니다. 특정 부분까지 0의 값을 갖고, 어느 시점 이후, 일차함수로 값이 증가하는 함수 말이죠. 이 함수는 ReLu(렐류) 함수라고 하는데요, rectified linear units의 약자입니다. R-E-L-U 이죠. 그리고, rectifiy라고 하는 것은 0을 최대값으로 한다는 뜻입니다.
그래서 이런 모양의 함수가 나오게 되는 것이죠. 일단은 ReLU 유닛과 관련해서는 크게 신경쓰실 필요는 없습니다.
나중에 다른 코스에서 다루도록 하겠습니다. 자 그럼, 이게 1개의 신경세포라고하면, 
이렇게 신경망이구요, 아주 작은 신경망이죠. 더 큰 신경망은 신경세포들이 쌓아 뭉쳐져서 만들어집니. 이 신경세포를 하나의 레고블럭이라고 생각하시면 더 큰 신경망은 레고블럭을 같이 쌓으면서
만들어진다고 볼 수 있습니다. 예시를 한번 볼까요? 단순히 집의 크기로 미래의 집값을 예측하기보다는 다른 특성이 있다고 가정해보죠, 호스트에 대해 더 많은 정보를 안다고 해봅시다,
예를 들어, 방의 갯수, 여기에 s를 안 적었군요,
그리고 여러분은 가족의 크기 또한 집값에 영향을 줄 수 있다고 생각할 수 있겠죠? 이 집이 3명으로 구성된 가족에게 적합할지, 4명 가족이 살 수 있을지, 또는 5명 가족 등등 말입니다. 실질적으로 제곱피트 또는 제곱미터의
집 크기와, 방의 개수가 특정 인원의 가족이 살 수 있는지 여부를 결정짓게 됩니다. 추가로, zip code도 알 수 있죠. 다른 나라에서는 zip code를 postal code라고도 합니다. zip code (우편번호)는 미래에 도보가능 여부를
알려주는 요소일 수 있습니다. 이 지역은 걷기에 알맞은가? 장을 보러 걸어갈 수 있는가? 학교는 걸어갈 수 있는가? 운전을 해야하는가? 어떤 사람들은 걸어서 다닐 수 있는 지역을 선호할 수 있습니다. 그럼 zip code와 재산같은 경우에, 미국에선 확실히 그렇고,
다른 나라도 적용될 수 있지만 학교의 질이 얼마나 좋은지 알 수 있습니다. 제가 그리고 있는 조금한 동그라미가
ReLU가 될 수 있습니다. rectified linear units 또는 다른 비선형 함수죠. 그렇게 되면 방의 크기와 개수에 따라서, 가족의 인원수와, 도보 가능한 정도를 알려주는
우편번호와, 우편번호와 재산에 따라 학교의 질을 예측할 수 있는
부분이 있습니다. 마지막으로 사람들이 집값에 값어치를 부여하는 경우, 본인이 가장 중시하는
부분이 있을 수 있습니다. 이 사례 같은 경우엔,
가족 구성 인원 수, 도보가능한 정도,
학교의 질, 들 여러가지 집값의 영향을 줄 수 있는 요소들이 있습니다. 이번 사례에선,
모든 4가지 입력값이 모두 x입니다. 그리고 y는 예측하려고 하는 집값입니다. 그러므로, 신경세포 또는 예측해주는 요소들을 쌓으면서, 앞 슬라이드에서도 보았듯이,
조금 더 큰 신경망을 갖추었습니다. 신경망을 어떻게 관리하냐면,
이를 도입하는 경우에, x의 입력값과, y라는 결과값을 트레이닝세트에 도입시키면 됩니다. 가운데 부분은 알아서 해결됩니다. 그러므로 실질적으로 도입하는 부분은 이것입니다. 여기서는, 4개의 입력값을 가지고 있는 신경망이 있습니다. 입력값의 특성은 크기, 방 개수, zip code 또는 우편번호, 이웃집의 재산 등이
될 수 있습니다. 이런 입력 값의 특성을 바탕으로 y의 값을 예측하는 것이
신경망의 역할입니다. 이 동그라미들은
숨겨진 유닛이라고도 하는데요 이 유닛들은 각각 4가지 특성을 반영합니다. 예를 들어, 첫 번째 노드가 가족 규모를 뜻하고 이 규모는 X1과 X2에 의존한다고 이야기하기보다는, 그 대신에, 신경망이 어떤 것이던 선택할 수 있도록 합니다. 그렇게 하고나서 4가지의 특성을 제공하여
자유로운 옵션을 제공합니다. 층이라고도 하는데,
이 입력 층을 신경망 가운데에 있는 층은 밀집하게 연결되어 있습니다. 그 이유는 모든 입력 값이 모든 동그라미에 연결되어 있기 때문입니다. 신경망의 가장 놀라운 부분은 어느 정도 x와 y에 대한 정보가 있으면, x와y에 대한
충분한 트레이닝 example도 있는 경우, x에서 y를 그리는 함수를 굉장히 잘 파악합니다. 기본적인 신경망에 대한 내용을 다루어 보았는데요, 여러분이 직접 고유의 신경망을 만들어보면, 지도학습 부문에서 매우 유용하고, 강력하다는 것을 느낄 것입니다.
즉, 조금 전에 봤던 집값을 예측하는 사례처럼 x를 이용하여 y를 산출하려고 하는 경우와 같이 말입니다. 다음 비디오에서는 지도학습의 몇가지 예를 더 살펴 보겠습니다. 본인 어플에 큰 도움이 될 수 있는 네트워크 example을 다뤄보도록 하겠습니다.