Bir önceki videoda, bu yayından (broadcasting) bahsetmiştik, Yayınlama (broadcasting) Python kodunuzun daha hızlı çalışmasını sağlamak için kullanabileceğiniz başka bir tekniktir. Bu videoda, Python'da yayınlamanın aslında nasıl çalıştığını öğreneceğiz. Bugün bir örnekle yayınlama (broadcasting) ni anlayalım. Matriste 100 gramlık dört farklı gıdanın karbonhidrat, protein ve yağdan olan kalori sayısını göstermektedir. Yani örneğin, 100 gram elmada 56 kalori karbonhidrat bulunmaktadır. Bu sayı protein ve yağdan daha fazla. Buna karşılık, 100 gramlık bir sığır etinde 104 kalori protein ve 135 kalori yağ bulunmaktadır. Şimdi, amacımız dört farklı gıdanın her biri için karbonhidrat, protein ve yağ kalori yüzdesini hesaplamak. Örneğimizdeki bu sütuna bakarsanız, sütundaki sayıları topladığımızda, 100 gramlık elma 56+1.2+1.8 yani toplam 59 kalori vardır. Yüzdesel olarak baktığımızda, bir elmadaki karbonhidratlardan elde edilen kalorinin oranı 59 üzerinden 56 olur, bu da yaklaşık olarak %94.9'dur. Yani bir elmadaki kalorilerin çoğu karbonhidratlardan gelirken, aksine sığır etindeki kalorilerin çoğu protein ve yağdan gelir. Bizim istediğimiz hesaplama, dört sütunun her birindeki 100 gramlık elma, sığır eti, yumurta ve patatesteki toplam kalori miktarı olan dört sütununu işlemek. Ve daha sonra matrisi bölerek dört gıdanın her biri için karbonhidrat, protein ve yağın kalori yüzdesini hesaplayacağız. Soru şu ki, bunu for döngüsü olmadan nasıl yapabiliriz? Bunu nasıl yapabileceğimize bir bakalım. İlk olarak yapacağımız şey, bu matrisi nasıl eşit dört A matrisine böleceğimize karar vermektir. Daha sonra Python koduyla sütunların içlerini dolduracağız. Toplam sayıya karşılık gelen dört sayıyı, toplam kalori sayısına karşılık gelen dört farklı gıdadan 100'er olarak gram alacağız. Ve dört sütunun her birini toplama karşılık gelmesi için ikinci bir satır Python kodu yazacağız. Eğer bu sözel açıklama çok açıklayıcı değilse yazılan Python koduna baktığımızda daha net olacaktır. Editör olarak Jüpiter kullanıyoruz İlk kod parçasını daha önceden yazdım. A matrisini değerler ile doldurdum. Kodumuzu Enter tuşuna basarak çalıştırıyoruz, çalıştı ve A matrisi ekrana yazıldı. Şimdi buraya ikinci Python kod satırını yazıyoruz. İlk olarak, (kalori) hesaplanacak. Kalori eşittir A çarpı sum. Parantez içindeki axis=0 in anlamı dikey(sütun) toplamıdır. Bunun hakkında birazdan daha ayrıntılı konuşacağız. Ve cal değişkenini ekrana yazdırıyoruz. Dikey toplamı(her bir sütunün toplamını) elde ettik. 59 elmadaki toplam kalori sayısıdır. 239 ise sığır etinin toplam kalori sayısı iken yumurta ve patatesteki toplam kalori miktarı da matriste gösterildiği gibi. Hesaplama yüzdesi= A/cal.reshape (1,4) (Ek bilgi kodun anlamı: A matrisini cal değerlerine göre 4 parçalı olacak şekilde yeniden şekillendirdi.) Yüzdeyi istediğimiz için de 100 ile çarpıyoruz. Hesaplama yüzdesini ekrana yazdırıyoruz. Kodumuz çalıştı. Böylece bu kod ile A matrisini aldık ve 1x4 matrisine böldük, ve bu bize matrisin yüzdesini verdi. Yaptığımız çalışmada elimizdeki elmanın kalorisi ilk sütunda görüldüğü gibi %94,9 karbonhidrattan geliyor. Slaytlara geri dönelim. Yazdığımız 2 satır kodun Jupiter editöründe yazılı olan karşılığı buydu. (axis=0) parametresinin anlamı Python'da dikey toplamdır. (sütunların toplamı) Yani eğer bu eksen 0 eşitse, dikey eksen toplamıdır, yatay eksen ise birdir. Böyle dikey olarak toplam yerine eksen 1 veya toplamı yazılabilir Buradaki bu komut A matrisinin Python yayınlama (broadcasting) örneğidir. Yani bu 3x4 lük matrisi,1x4 lük matrise bölebilirsiniz. Teknik olarak, bu ilk satır kodundan sonra cal, değişken olan cal zaten 1x4 lük matristi. Yani teknik olarak yeniden şekillendirmek(reshape) gerekmez bu yüzden aslında bu işlem biraz fazlalık. Fakat, Python kodlarken matrisin ne olduğundan veya boyutundan emin değilsem reshape komutunu kullanıp vektörün satırını ya da sütununu ne yapmak istiyorsam onu yapabilirim. Yeniden şekillendirme komutu(reshape) sabittir. Bu basit ve ucuz bir işlemdir. Boyutundan emin olmak için yeniden şekillendirme komutunu kullanma konusunda çekingen olmayın çünkü matrislerinizin olması gereken bir büyüklükleri vardır. Şimdi, bu tür işlemlerin nasıl çalıştığını daha ayrıntılı olarak açıklayalım, değil mi? 3x4 lük bir matrisimiz vardı ve biz bunu 1x4 lük matrise böldük. Peki 3x4 lük bir matrisi 1x4 lük matrise nasıl bölebiliriz buna bakalım ? veya 1x4 lük vektöre? Birkaç broadcasting(yayin) örneği inceleyelim. Eğer 4x1'lik vektöre bir sayi eklemek isterseniz Python'un yapacağı şey şudur sayıyı alır ve otomatik olarak büyütür. aşağıdaki gibi 4x1lik vektörü [bir,iki,üç,dört] 100 ile toplayarak sonucu yazarız. Her bir ögeye 100 değeri eklenir. ve aslında bu yayın biçimini daha önceki bir videoda b parametresinin sabit olduğu yerde kullanıyoruz. Ve bu tür yayınlar hem sütun vektörleri hem de satır vektörleri ile çalışır, aslında benzer bir yayınlama biçimi daha önce kullandığımız sabit olan vektör lojistik regresyon parametresi olarak ekliyoruz. Sonuçların doğruluğunun, tüm önermeler doğru olduğunda garanti edilmesini isteriz. Diyelim ki 2x3 lük bir matrisimiz var ve bu matrise 1xn lik matris ekleniyor. Genel olarak (m,n) matrisiniz varsa ve ona (1,n) matrisini ekliyorsanız Python'un yapacağı şey m matrisini tekrardan yazmaktır, bunu mxn matrisine dönüştürmek için 1x3 matrisindeki ögeleri yeniden ikinci kez yazıyoruz. Ayrıca, 2x3 lük matrisi buna ekleyeceğiz. Toplama sonucumuz sağdaki gibi olacak. Tamam mı? (m,n) matrisimizden aldığımız ilk sütuna 100, ikinci sütuna 200, üçüncü sütunu da 300 ekledik. Temel olarak bir önceki slaytta yaptığımız şey toplama işlemi yerine bölme işlememi kullanmamız dışında En son örneğimizde, (m,n) matrisimize (m,1) vektörü, (m,1) matris eklendiğinde sadece matrisi n kere yatay olarak kopyalamaktır. Sonuçta elde edeceğimiz matris (m,n) lik matristir. Matris tahmin edebileceğiniz gibi yatay olarak 3 kez kopyalandığında ve ilk matristeki değerleri eklediğimizde sağdaki sonucu elde ederiz. İlk satıra 100 ve ikinci satıra 200 ekliyoruz. İşte Python da genel bir yayın ilkesi. Eğer (m,n) bir matrisiniz varsa ve bir (1,n) matrisi ekliyor , çıkarıyor , çarpıyor veya bölüyorsanız o zaman n kere (m,n) matrisini kopyalayın. Ve daha sonra bölme ögesinin toplanması, çıkarılması ve çarpılmasını uygulayın. Aksi taktirde (m,n) matrisini alıp (m,1) matrisiyle toplama,çıkarma ve bölme yaparsan bu matrisi n defa kopyalar. Ve bunu (m,n) matrisine dönüştürün ve operation işlem ögesini uygulayın. Sadece yayınlardan(broadcasting) biri yani (m,1) matrisiniz varsa, bu bir sütun vektörüdür [bir,iki,üç] gibi ve, ekleme ,çıkarma,çarpama veya bölme işlemini satır numarasına göre yaparsınız. (1,1) matrisi örneğin 100 gibi değerle işleme girecekse, o zaman başka bir (n,1) matrisi elde edene kadar gerçek sayı n kere kopyalanır, ve sonra bu örnekte olduğu gibi ekleme işlemi gerçekleşir. Benzer bir durumda satır vektörleri için gerçekleşir. Yayının(broadcasting) tamamen genel sürümü bundan biraz daha fazlasını bile yapabilir. Eğer bu konu ile ilgilenirseniz, NumPy belgelerini okuyabilir ve bu belgede yayınlara bakabilirsiniz. Bu döküman biraz daha genel bir yayın(broadcasting) tanımı verir. Ancak slaytta bahsettiklerimiz, bir sinir ağını uygularken kullanmamız gereken ana yayın biçimleridir. Paketlemeden önce, son bir yorum yapmak gerekirse, programlama yaparken kullandığımız MATLAB yada Oktave (octave) daki bsxfun fonksiyonu yapay sinir ağlarındaki bsxfun ile benzer çalışır tamamen aynı çalışmaz. Fakat genellikle benzer amaç için kullanılır. Python'da yayın kullandığımız gibi. Ama bu ileri düzey Matlab ve Octave kullanıcıları içindir, eğer bunu bilmiyorsanız endişe etmeyin. Python'da sinir ağlarını kodlarken bunu bilmenize gerek yok. Yani kullanmasanız da Python'da yayın (broadcasting) yapabilirsiniz. Umarım programlama yaptığınızda, broadcasting'in sadece kodu daha hızlı çalışmasını sağlamasından ziyade aynı zamanda da daha az kod satırıyla ne yapmak istediğinize yardımcı olacağını deneyimlersiniz. Programlama ile ilgili alıştırmalara geçmeden önce sizinle sizinle bir takım fikirleri paylaşmak istiyorum, Python kodunda bulduğum bazı ipuçları ve püf noktaları var. umarım yardımcı olabilirim. Bir sonraki videoda bununla ilgili konuşalım.