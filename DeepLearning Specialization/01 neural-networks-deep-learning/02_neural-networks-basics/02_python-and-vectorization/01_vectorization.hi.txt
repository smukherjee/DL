पुन: स्वागत है. वेक्टराइज़ेशन है मूलत: कला छुटकारा पाने की स्पष्ट फ़ॉर लूप्स से आपके कोड में. डीप लर्निंग के युग में, निश्चित रूप से, 
व्यावहारिक रूप में डीप लर्निंग में, अक्सर आप पाएँगे आपको ट्रेन करते हुए
 अपेक्षाकृत बड़े डेटा सेट्स पर, क्योंकि तब ही डीप लर्निंग अल्गोरिद्म्स बेहतर काम करते हैं. और इसलिए, यह महत्वपूर्ण हैं कि आपका 
कोड त्वरित काम करे क्योंकि अन्यथा, यदि यह चल रहा है एक बड़े डेटा सेट पर, आपके कोड को शायद लग सकता हैं लम्बा समय चलने में 
तब आप पाएँगे अपने को इंतज़ार करते हुए एक लम्बे समय तक 
परिणाम प्राप्त करने के लिए. तो डीप लर्निंग के युग में, मुझे लगता है वेक्टराइज़ कर पाने की क्षमता 
एक महत्वपूर्ण कौशल बन गया है. चलिए शुरू करते हैं एक उदाहरण से. तो, क्या है वेक्टराइज़ेशन? लॉजिस्टिक रेग्रेशन में आपको कम्प्यूट करना होता है
 Z बराबर है W ट्रान्स्पोज़ X जमा B, जहाँ W था यह कॉलम वेक्टर और X भी है यह वेक्टर. शायद वहाँ बहुत बड़े वेक्टर्स हैं
 यदि आपके पास बहुत से फ़ीचर्ज़ हैं. तो, W और X थे दोनो R पर Nx डिमेन्शन के वेक्टर्स. तो, W ट्रान्स्पोज़ X कम्प्यूट करने के लिए, यदि आपके पास थी एक नॉन-वेक्टराइज्ड इम्प्लमेंटेशन, आप भी करेंगे कुछ ऐसा जैसे Z बराबर है ज़ीरो. और फिर फ़ॉर I होते हुए Nx की रेंज में, तो, I बराबर है 1, 2, ... Nx के लिए, Z प्लस W बराबर है W I गुणा XI. और फिर शायद आप करें Z प्लस B अंत में. तो, वह है एक नॉन-वेक्टराइज्ड इम्प्लमेंटेशन. तब आप पाएँगे कि यह वाक़ई में बहुत धीरे चल रहा है. इसके विपरीत, एक वेक्टराइज्ड इम्प्लमेंटेशन
 सिर्फ़ कम्प्यूट करेगी W ट्रान्स्पोज़ X सीधे. पाइथान में या numpy में, कमांड जो आप इस्तेमाल करते हैं उसके लिए है Z ईक्वल्ज़ np.W, X, तो यह कम्प्यूट करता है W ट्रान्स्पोज़ X. और आप जोड़ भी सकते हैं B उसको सीधे. और आप पाएँगे कि यह अधिक तेज़ है. चलो इसे वास्तव में स्पष्ट करते हैं एक छोटे डेमो से. तो यहाँ है मेरी जूपिटर नोट्बुक जहाँ मैं लिखूँगा कुछ पाइथान कोड. तो, पहले मैं इम्पोर्ट करता हूँ numpy लाइब्रेरी import numpy as np. और तो, उदाहरण के लिए, मैं बना सकता हूँ A एक एर्रे की तरह इस प्रकार. मान लो कहते हैं print A. अब, इस कोड को लिख लेने के बाद, यदि मैं दबाता हूँ शिफ़्ट एंटर, तो यह कोड एक्सेक्यूट करेगा. तो, इसने बनाया एर्रे A और यह इसे प्रिंट करता है. अब, चलो करते हैं वेक्टराइज़ेशन डेमो. मैं इम्पोर्ट करूँगा टाइम लाइब्रेरीज़. क्योंकि हम उसका इस्तेमाल करते हैं, पाने के लिए समय कि कितना समय लगता है 
विभिन्न ऑपरेशन्स को. चलो बनाते हैं एक एर्रे A. वह है random.rand. यह बनाता है एक मिलियन डिमेन्शन का एर्रे 
जिसमें रैंडम वैल्यूज़ हैं. b = np.random.rand. एक और मिलियन डिमेन्शन का एर्रे. और, अब, tic=time.time, तो वह मापता है अभी का समय, c = np.dot (a, b). toc = time.time. और यह print, यह है वेक्टर वर्ज़न. यह है एक वेक्टर वर्ज़न. और तो, चलो प्रिंट करते हैं. चलो देखते हैं पिछला समय, तो वह है toc - tic x 1000, ताकि हम व्यक्त कर सकें इसे मिलीसेकंड में. तो, ms है मिलीसेकंड. तो मैं दबाता हूँ शिफ़्ट एंटर, तो, उस कोड ने लगभग तीन मिलीसेकंड या 
कुछ इतना इस समय लिया 1.5, शायद लगभग 1.5 या 3.5 मिलीसेकंड एक समय में. यह बदलता है थोड़ा जैसे मैं इसे चलाता हूँ, लेकिन लगता है औसतन इसे लग रहा कुछ 1.5 मिलीसेकंड, शायद दो मिलीसेकंड जब मैं इसे चलाता हूँ. ठीक है. चलो इस कोड में डालना जारी रखते हैं. चलो अब इम्प्लमेंट करते हैं नॉन-वेक्टराइज्ड वर्ज़न. चलो देखते हैं, c = 0, फिर tic = time.time. अब चलो इम्प्लमेंट करते हैं एक फ़ॉर लूप. फ़ॉर I 1 मिलियन की रेंज में, मेरे पास हैं ज़ीरोज़ की संख्या, ठीक है? C += (a,i) x (b,i), और फिर toc = time.time. अंत में, प्रिंट करते हैं स्पष्ट फ़ॉर लूप के लिए. समय जो इसे लगता हैं वह है यह 1000 x toc - tic + "ms" डिनोट करने के लिए कि हम इसे कर रहे हैं मिली सेकंड में. चलो एक और चीज़ करते हैं. चलो प्रिंट करते हैं c की वैल्यू. हम कम्प्यूट करते हैं इसे सुनिश्चित करने के लिए 
यह समान वैल्यू है दोनो स्थितियों में. मैं दबाता हूँ शिफ़्ट एंटर इसे रन करने के लिए और चेक करें उसे. दोनो स्थितियों में, वेक्टर वर्ज़न और नॉन-वेक्टर वर्ज़न ने कम्प्यूट की समान वैल्यूज़, जैसा कि आप जाते हैं, 250286.99, और इसी प्रकार आगे. वेक्टर वर्ज़न को लगे 1.5 मिलीसेकंड. स्पष्ट फ़ॉर लूप को और नॉन-वेक्टर वर्ज़न ने लिए 
लगभग 400 या 500 मिलीसेकंड. नॉन-वेक्टर वर्ज़न को लगे कुछ 300 गुणा ज़्यादा समय वेक्टर वर्ज़न की तुलना में. इस उदाहरण से आप देख सकते हैं 
यदि आप याद रखें वेक्टराइज़ करना आपका कोड, आपका कोड वास्तव में 300 गुणा तेज़ काम करता है. चलो फिर से रन करते हैं. बस फिर से रन करते हैं. हाँ. वेक्टर वर्ज़न 1.5 मिली सेकंड एंड फ़ॉर लूप तो यह 481 मिलीसेकंड, फिर से. क़रीब 300 गुणा धीरे स्पष्ट फ़ॉर लूप करने के लिए. तो 300 गुणा धीरे, यह है अंतर आपके कोड जो शायद ले एक मिनट रन करने के लिए तुलना में पाँच घंटे रन करने में. और जब आप इम्प्लमेंट कर रहे हैं 
डीप लर्निंग अल्गोरिद्म्स, आपको वास्तव में मिल सकता है 
एक परिणाम वापिस जल्दी. यह होगा और अधिक तेज़ यदि आप 
वेक्टराइज़ करते हैं आपका कोड. आप में से कुछ ने बहुत शायद सुना हो स्केल कर सकने वाले डीप लर्निंग इम्प्लमेंटेशन्स 
के बारे में जो किए जाते हैं एक GPU पर 
या एक ग्राफ़िक्स प्रासेसिंग यूनिट पर. लेकिन सभी डेमो जो मैंने अभी किए 
जूपिटर नोट्बुक पर, हम वास्तव में हैं CPU पर. और ऐसा होता है कि दोनो GPU और CPU में हैं 
पैरलेलाइज़ेशन इन्स्ट्रक्शन्स. उन्हें कभी-कभी कहते हैं SIMD इन्स्ट्रक्शन्स. उसका मतलब है एक सिंगल इन्स्ट्रक्शन मल्टिपल डेटा. लेकिन इसका मूल रूप से मतलब है कि, यदि आप इस्तेमाल करते हैं बिल्ट-इन फ़ंक्शन्स, 
जैसे कि यह np.function या अन्य फ़ंक्शन्स जिनके लिए 
आपको स्पष्ट रूप से नहीं इम्प्लमेंट करना पड़ता 
एक फ़ॉर लूप. यह सक्षम करता हैं पाइथान numpy को
 लेने के लिए बेहतर लाभ पैरलेलिस्म का करने के लिए 
आपकी कॉम्प्यूटेशन्स अधिक तेज़. और यह सत्य है दोनो कॉम्प्यूटेशन्स CPU पर 
और कॉम्प्यूटेशन्स GPU पर. सिर्फ़ इतना कि GPU हैं उल्लेखनीय रूप से बेहतर इन SIMD कैल्क्युलेशन्स में 
लेकिन CPU हैं वास्तव में उतनी बुरी नहीं उसमें. शायद उतनी अच्छी नहीं जितनी GPU. आप देख रहे हैं कि कैसे वेक्टराइज़ेशन 
काफ़ी गति बढ़ा सकता है आपके कोड की. नियम याद रखना है कि जहाँ तक सम्भव हो, स्पष्ट फ़ॉर लूप का इस्तेमाल न करें. चलो जाते हैं अगले वीडियो पर देखने के लिए 
कुछ और उदाहरण वेक्टराइज़ेशन के और शुरू करने के लिए 
वेक्टराइज़ लॉजिसिटिक रेग्रेशन भी.