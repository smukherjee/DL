이번 비디오에선, broadcasting이라는 방법을 이용해서 파이썬의 코드를 더 빨리 운영할 
수 있다고 말씁드렸는데요. 이번 비디오를 통해, 파이썬에서
broadcasting이 어떻게 작동되는지 
자세히 알아보겠습니다. broadcasting에 대한 내용을 예시로 설명 드리겠습니다. 이 매트릭스에서는 탄수화물, 단백질, 그리고 지방에서의 칼로리를 각각의 음식 100g 별로 표현했습니다. 예를 들어, 사과 100g 에서는 56칼로리의 탄수화물, 그리고 더 훨씬 적은 양의 단백질과 지방이 검출됩니다. 반대로 100g의 소고기에서는
104g의 단백질, 135g의 지방이 확인됩니다. 자 이제 그럼 칼로리의 퍼센트를 각각 음식 별로 탄수화물, 단백질, 지방으로 나누어서 
계산하는 게 목표라고 해보죠. 예를 들어, 이 줄을 보면 이 숫자를 모두 더할 경우, 100g 사과에서는 56 더하기 1.2 더하기 59 칼로리입니다. 칼로리의 퍼센트를 구하면 탄수화물의 비율은 56 나누기 59이므로 약 94.9 퍼센트입니다. 대부분이 칼로리는 탄수화물에서 오는 것이죠. 
반면에, 소고기에서는 대부분의 칼로리가 단백질과 지방에서 오는 것이고요. 그러므로 원하는 계산법은 매트릭스에서 모든 세로줄의 값을 더한 후, 100g의 사과, 소고기, 달걀, 감자에서 오는 총 칼로리를 계산하는 것입니다. 매트릭스를 두고 나누면 탄수화물, 단백질, 지방별로 그 퍼센트를 4가지 음식마다 구할 수 있습니다. 문제는, 이러한 방법을 일정한 for-loop가 없이
진행할 수 있을까요? 어떻게 하는지 한번 보겠습니다. 무엇을 할 것이냐면, 
이 매트릭스를 3 x 4 매트릭스인 A로 지정하겠습니다. 그리고 1개의 파이썬 코드를 통해
세로줄을 더하게 할 것입니다. 그러면 4가지 음식의 총 칼로리를 나타내는 4가지의 숫자가 나올 텐데요 음식의 100g 당 나오는 칼로리입니다. 2번째 파이썬 코드를 이용해 각각의 세로줄을 각각의 합으로 나눌 것입니다. 구두로 설명한 내용이 잘 이해가 안되시면, 파이썬 code를 통해 조금 후에 더 자세히 설명드릴 것입니다. 여기 Jupiter notebook에서 이미 첫 번째 코드를 적었는데요 방금 A 매트릭스 숫자를 적용시키고, 
shift+enter를 누르겠습니다. run하면 A 매트릭스가 나옵니다. 이제 2번째 파이썬 코드인데요, 첫 번째는 cal = a.sum 그리고 axis = 0을 기입하겠습니다. 세로로 더하기 위한 방법이죠. 조금 후에 보도록 하겠습니다. 그리고 print cal을 입력합니다. 세로로 더할 건데요. 그러면 59는 사과의 총 칼로리이고, 239칼로리는 소고기의 총 칼로리이고, 
달걀과 감자도 이렇습니다. 이제 퍼센트 계산인데요, 퍼센트를 A 나누기 cal.reshape 1, 4로 지정합니다. 사실 퍼센트 백분율로 원하기 때문에 
100을 여기에 곱해주겠습니다. 그럼 이제 print percentage 해줍니다. 이걸 run 해보죠, 이 명령을 통해서 A 매트릭스 갖고 1 x 4 매트릭스로 나누었습니다. 이렇게 하면 퍼센트의 매트릭스를 줍니다. 아까 직접 저희가 계산했듯이 세로줄에서 사과는 첫번째 줄에서
총 칼로리 중 94.9퍼센트가 탄수화물이었습니다. 다시 슬라이드로 돌아가보겠습니다. 2개의 코드를 다시 반복하면 Jupiter notebook에 적은 내용은 이렇습니다. 더 상세히 이야기하자면, (axis = 0)라는 매개변수는 파이썬이
세로로 값을 더하라고 하는 것인데요 세로로 값을 더하라고 하는 것인데요 반대로 axis가 1이면 세로가 아닌 가로로 그 값을 더하라는 것입니다. 그리고 이 명령어는 파이썬 broadcasting의 예입니다. 
A 매트릭스를 가지고 3 x 4 매트릭스죠, 
이것을 1 x 4 매크릭스로 나눕니다. 엄밀히 이야기하면, 첫번째 코드 이후, 
cal, 변수인 cal이죠, 이미 1 x 4 매트릭습니다. 즉, 여기서는 reshape을 부를 필요가 없습니다. 여기서는 약간 쓸모가 없죠. 그러나 만약에 파이썬 codes코드를 
쓸때, 매트릭스의 다이멘션을 잘 모르는 경우 reshape 명령어를 그냥 놔둡니다. 세로줄인지, 가로줄인지, 어떤 줄이던 제대로 지정하기 위해서죠. reshape 명령은 일정 시간인데요. order one operation이기 때문에 부르는데 굉장히 cheap합니다. 그러므로 reshape 명령을 마음껏 사용하셔서 매트릭스의 크기를 잘 맞추시길 바랍니다. 자 그럼 이제 이러한 operation이 어떻게 작동하는지 
더 자세히 알아보겠습니다 우리는 3 x 4 매트릭스를 1 x 4 매트릭스로 
나누었었는데요, 어떻게 3 x 4 매트릭스를 1 x 4 매트릭스로 나눌까요? 또는 1 x 4 벡터로 말이죠 broadcasting에 대한 몇 가지 다른 예를 보겠습니다. 4 x 1 벡터를 가지고 숫자에 더하면 파이썬은 이 숫자를 자동으로 4 x 1 벡터로 보기와 같이 자동 확장 시킬 것입니다. 그러면 벡터 [1, 2, 3, 4] 더하기 100은 오른쪽과 같은 벡터가 되는 것이죠. 100을 모든 요소에 더하는 것입니다. 이번 비디오에 봤던, 이런 경우의 broadcasting 을, 상수가 
매개변수 b였던 때 사용합니다. 이런 유형의 broadcasting은 세로 벡터나
가로 벡터에 모두 사용됩니다. 이런 비슷한 broadcasting을 이전에도 파라미터인 b를 상수로 더하는 경우도 
로지스틱 회귀분석의 경우에 다룬 적이 있죠. 또 다른 예시를 보여드리겠습니다. 또 하나의 예제를 보도록 합시다. 2 x 3 매트릭스가 있다고 해보겠습니다. 여기에 1개의 n 매트릭스를 더합니다. 일반적인 케이스의 경우, (m, n) 매트릭스가 있고, (1, n) 매트릭스를 더하는 것일 텐데요. 파이썬은 일단 matrix을 m번 복사해서 m x n 매트릭스를 만들 것입니다. 그러므로 이 1 x 3 매트릭스 대신에 
이번 보기에서는 2번 복사해서 
이렇게 변형시킬 것입니다. 2 x 3 매트릭스로하고 합쳐진 오른쪽의 값이 나올 것입니다. 아시겠죠? 이 값을 가지고 100을 첫 번째 세로줄에 더하고 2번째 세로줄에 200을 더하고, 
300을 3번째 줄에 더해줬습니다. 이전 슬라이드에서도 이와 같이 풀었는데요, 더하기를 하는 것 대신에, 이전에는
나누기를 한 것이죠. 마지막 예로, 
(m, n) 매트릭스에 (m, 1) 벡터를 더하거나 (m, 1) 매트릭스를 더할 수 있습니다. 이런 경우, 이것을 n 번 가로로 곱하고, 그러면 (m, n) 매트릭스가 나옵니다. 가로로 3번 복사된다고 상상하시면 되는데요. 이 값들을 더해줍니다. 이 값들을 더하면 이 값이 나옵니다. 첫 번째 줄에 100을 더했고, 2번째 줄에 200을 더했습니다. 이것은 파이썬에서의 일반적인 broadcasting 원리인데요. (m, n) 매트릭스가 있고 (1, n) 매트릭스를 더하거나 빼거나 곱하거나 나누면 (m, n) 매트릭스에 이것을 n번 복사합니다. 그렇게 해서 더하기, 빼기, 곱하기 또는 나누기의 요소를 적용시켜줍니다. 반대로 (m, n)매트릭스를 가지고 (m, 1) 매트릭스를 더하거나, 빼거나, 곱하거나, 나우면 
이것 또한 n번 복사할 것입니다. 그렇게해서 (m, n) 매트릭스로 변형한 다음
operation element wise 적용할 것입니다. broadcasting중 하나인데요, 
즉, (m, 1) 매트릭스가 있으면, 세로 벡터인데요 [1, 2, 3] 처럼요, 그리고 더하거나 빼거나, 곱하거나, 나눠줍니다. 줄 숫자 별로요 (1, 1)매트릭를 적용시킬 수도 있죠, 더하기 100을 하면 (n, 1)매트릭스가 나올 때까지 이 실수를 n번 복사합니다. 이 예제에서는 더하기와 같은 절차를 element-wise 진행합니다. 가끔씩은 row 벡터에도 비슷하게 적용됩니다. 일반적인 broadcasting 버전은 이거보다 조금 더 할 수 있습니다. 관심이 있으시면, 넘파이 관련 자료를
찾으셔서 broadcasting에 대한 부분을 읽으실 수 있습니다. 오히려 더 broadcasting의 일반적인 정의라고 할 수 있는데요. 이 슬라이드 내용이 주요 broadcasting 유형입니다. 신경망을 도입할 때 사용하는 주요 broadcasting 유형이죠. 끝내기 이전에, 마지막으로 말씀드리자면, MATLAB이나 Octave에서 프로그래밍을 하시는 분 같은 경우에, bsxfun 함수를 써보셨으면 신경망 분야에서도 bsxfun 가 다르긴 하지만
비슷하게 작동하는 부분이 있습니다. bsxfun 함수가 파이썬에서의 broadcasting 과 
비슷한 목적으로 자주 쓰이는데요. 물론 아주 상급 MATLAB 이나 Octave 유저들만 알 수 있습니다만, 들어보신 적이 없으시면, 
걱정 안 하셔도 됩니다. 파이썬에서 신경망을 코딩하는데는 필요가 없기 때문입니다. 자, 파이썬에서 broadcasting에 대한 내용을 다루어 보았는데요. 여러분이 프로그래밍 숙제를 하실 때, broadcasting이 코드를 빨리 실행되게 해줄 뿐 아니라, 더 간략한 code 라인을 통해 원하는 것을 수행시켜주기 바랍니다. 프로그래밍 연습 학습을 시작하기에 앞서, 또 다른 아이디어를 공유하고 싶은데요 파이썬 코드에서 버그를 줄이는 방법에 대해서 개인적으로 큰 도움 됐었던 팁과 요령을 공유하겠습니다. 여러분에게 도움이 됐으면 좋겠습 자 그럼 이제 관련 내용은 다음 비디오에서 다루도록 하겠습니다.