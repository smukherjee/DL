1
00:00:00,000 --> 00:00:05,340
No vídeo anterior, você viu alguns 
exemplos de vetorização usando

2
00:00:05,340 --> 00:00:07,770
funções internas e, evitando explicitamente

3
00:00:07,770 --> 00:00:11,130
os laços de repetição "for", permite que você 
acelere o seu código significativamente.

4
00:00:11,130 --> 00:00:13,558
Vamos ver mais alguns exemplos.

5
00:00:13,558 --> 00:00:16,110
A regra de ouro para manter 
em mente é, quando você estiver

6
00:00:16,110 --> 00:00:19,792
programando sua rede neural ou quando 
você estiver programando regressão logística,

7
00:00:19,792 --> 00:00:23,190
sempre que possível, evite usar laços de repetição "for".

8
00:00:23,190 --> 00:00:27,285
E nem sempre é possível se livrar
de um laço de repetição "for",

9
00:00:27,285 --> 00:00:29,520
mas quando você puder usar uma função interna ou encontrar

10
00:00:29,520 --> 00:00:32,710
alguma outra forma de calcular o que quer que você precise,

11
00:00:32,710 --> 00:00:36,555
você geralmente irá mais rápido do que 
se você tivesse um laço de repetição "for".

12
00:00:36,555 --> 00:00:38,445
Vamos olhar em outro exemplo.

13
00:00:38,445 --> 00:00:44,412
Se alguma vez você desejar calcular 
um vetor u como produto de uma matriz A,

14
00:00:44,412 --> 00:00:46,144
e outro vetor v,

15
00:00:46,144 --> 00:00:50,840
então a definição de um multiplicador de matriz é que seu

16
00:00:50,840 --> 00:00:55,830
uᵢ é igual ao somatório j de Aᵢj vezes vj.

17
00:00:55,830 --> 00:00:57,050
Certo.

18
00:00:57,050 --> 00:00:58,445
Assim é como você define uᵢ.

19
00:00:58,445 --> 00:01:01,500
Então, a implementação não vetorizada disso seria

20
00:01:01,500 --> 00:01:06,140
saber definir
u = np.zeros ...(continua)

21
00:01:06,140 --> 00:01:08,105
... isso vai ser
u = np.zeros((n,1))

22
00:01:08,105 --> 00:01:11,745
E então, 
um laço "for" para i,

23
00:01:11,745 --> 00:01:14,250
outro laço "for" para j, e assim vai.

24
00:01:14,250 --> 00:01:22,950
Correto? Então
u[i] += A[i][j] vezes v[j].

25
00:01:22,950 --> 00:01:27,725
Então agora, isso tem dois laços "for"
um para i" e outro para "j".

26
00:01:27,725 --> 00:01:29,269
Então esta foi uma versão
não vetorizada.

27
00:01:29,269 --> 00:01:37,355
A implementação vetorizada será
u = np.dot(A,v)

28
00:01:37,355 --> 00:01:39,160
e esta implementação à direita para

29
00:01:39,160 --> 00:01:41,655
a versão vetorizada elimina

30
00:01:41,655 --> 00:01:44,628
dois laços de repetição "for" diferentes 
e será muito mais rápida.

31
00:01:44,628 --> 00:01:46,655
Vamos ver mais um exemplo.

32
00:01:46,655 --> 00:01:50,900
Digamos que você já tem um vetor v na memória e você quer

33
00:01:50,900 --> 00:01:55,190
aplicar a operação exponencial em 
todos os elementos de, digamos,

34
00:01:55,190 --> 00:01:59,250
este vetor v. Então, você calcula 
u igual ao vetor, isto é, igual a e^v₁, e^v₂,

35
00:01:59,250 --> 00:02:04,085
e assim por diante até
e^vₙ.

36
00:02:04,085 --> 00:02:10,370
Então, esta seria uma implementação 
não vetorizada onde, primeiramente,

37
00:02:10,370 --> 00:02:13,700
você inicializa u com um vetor de zeros
 e então, você tem

38
00:02:13,700 --> 00:02:18,260
um laço de repetição "for"
que calcula os elementos, um de cada vez.

39
00:02:18,260 --> 00:02:24,110
Mas resulta que Python e Numpy têm muitas 
funções internas que permitem que você

40
00:02:24,110 --> 00:02:31,160
calcule estes vetores com apenas uma 
única chamada de uma única função.

41
00:02:31,160 --> 00:02:40,180
Então, eu implementaria isso assim:
import numpy as np

42
00:02:40,180 --> 00:02:50,110
e depois chamaria u = np.exp(v)
Note que, enquanto anteriormente

43
00:02:50,110 --> 00:02:53,600
você teve um laço de repetição "for", 
com apenas uma linha

44
00:02:53,600 --> 00:02:57,317
de código aqui, com este v como um vetor de entrada,

45
00:02:57,317 --> 00:02:58,840
u como um vetor de saída,

46
00:02:58,840 --> 00:03:02,340
você se livrou do laço de 
repetição "for" e a implementação na

47
00:03:02,340 --> 00:03:06,275
direita será muito mais rápida do 
que a outra do laço "for".

48
00:03:06,275 --> 00:03:10,310
Na verdade, a biblioteca numpy 
tem muitas outras funções de vetores.

49
00:03:10,310 --> 00:03:15,175
Assim, np.log(v) calculará
o log de cada elemento de v.

50
00:03:15,175 --> 00:03:19,220
np.abs(v) calcula o 
valor absoluto de cada elemento de v.

51
00:03:19,220 --> 00:03:24,935
np.maximum(v,0), calcula o valor máximo entre 
o elemento de v e zero,

52
00:03:24,935 --> 00:03:29,850
você obtém, assim, o máximo entre 
cada elemento de v ou zero (o que for maior, certo?)

53
00:03:29,850 --> 00:03:31,290
v**2

54
00:03:31,290 --> 00:03:38,214
eleva ao quadrado
cada elemento de v. Você sabe,

55
00:03:38,214 --> 00:03:42,932
1/v pega o 
inverso de cada elemento, e assim por diante.

56
00:03:42,932 --> 00:03:45,635
Então, sempre que você estiver tentado 
a escrever um laço de repetição "for",

57
00:03:45,635 --> 00:03:48,440
observe se há alguma forma de chamar

58
00:03:48,440 --> 00:03:53,069
uma função interna do NumPy sem 
ter que fazer o laço de repetição "for".

59
00:03:53,069 --> 00:03:55,640
Então, vamos pegar todos 
esses aprendizados e aplicá-los

60
00:03:55,640 --> 00:03:59,105
em nossa implementação do gradiente 
decrescente na regressão logística

61
00:03:59,105 --> 00:04:02,955
e ver se podemos, pelo menos, nos 
livrar de um dos dois laços de 
repetição "for" que nós tínhamos.

62
00:04:02,955 --> 00:04:07,980
Então, aqui está o nosso código para calcular 
as derivadas para a regressão logística.

63
00:04:07,980 --> 00:04:09,335
E nós tínhamos 2 laços de repetição "for".

64
00:04:09,335 --> 00:04:13,065
Um era este aqui em cima e 
o segundo era este aqui, correto?

65
00:04:13,065 --> 00:04:15,422
Então, em nosso exemplo,

66
00:04:15,422 --> 00:04:17,810
nós tínhamos n, ou melhor,
 nₓ = 2,

67
00:04:17,810 --> 00:04:19,910
mas se tivéssemos mais 
características do que

68
00:04:19,910 --> 00:04:23,865
apenas duas, então 
precisaríamos de laços "for" sobre dw₁,

69
00:04:23,865 --> 00:04:25,676
sobre dw₂, dw₃ e assim por diante.

70
00:04:25,676 --> 00:04:30,305
Então, é como se houvesse, na verdade,
um laço "for" par= 1 até j= nₓ.

71
00:04:30,305 --> 00:04:37,395
Você sabe que dwj
é atualizada em cada iteração, correto?

72
00:04:37,395 --> 00:04:41,745
Então, queremos eliminar 
este segundo laço "for".

73
00:04:41,745 --> 00:04:43,745
É isso o que faremos nesta linha.

74
00:04:43,745 --> 00:04:48,725
A forma que faremos isso é, ao invés 
de explicitamente inicializar dw₁,

75
00:04:48,725 --> 00:04:51,390
dw₂, e assim por diante, com zeros,

76
00:04:51,390 --> 00:04:58,100
nós vamos eliminar isso e ao 
contrário, faremos de dw um vetor.

77
00:04:58,100 --> 00:05:05,600
Definiremos dw igual a 
np.zeros, e faremos isso, digamos,

78
00:05:05,600 --> 00:05:10,490
para um vetor de dimensões nₓ por 1, 
(nₓ,1)

79
00:05:10,490 --> 00:05:13,175
e aqui, ao invés disso, você sabe,

80
00:05:13,175 --> 00:05:15,941
que é um laço de repetição sobre 
os componentes individuais,

81
00:05:15,941 --> 00:05:19,190
nós simplesmente usamos 
esta operação de valor de vetor.

82
00:05:19,190 --> 00:05:22,350
dw + = X⁽ⁱ⁾ dz⁽ⁱ⁾

83
00:05:22,350 --> 00:05:32,031
dw += X⁽ⁱ⁾ dz⁽ⁱ⁾ 
e então, finalmente, ao invés disso,

84
00:05:32,031 --> 00:05:33,620
nós só teremos

85
00:05:33,620 --> 00:05:42,562
dw /= m. Agora, passamos de dois 
laços de repetição "for" para apenas um.

86
00:05:42,562 --> 00:05:48,864
Nós ainda temos este laço "for" sobre 
os exemplos de treinamento individuais.

87
00:05:48,864 --> 00:05:51,030
Espero que este vídeo 
tenha dado uma noção de

88
00:05:51,030 --> 00:05:54,165
vetorização e de que quando nos 
livramos de um laço de repetição "for",

89
00:05:54,165 --> 00:05:56,505
seu código já irá rodar mais rápido.

90
00:05:56,505 --> 00:05:58,320
Mas resulta que podemos fazer ainda melhor.

91
00:05:58,320 --> 00:05:59,418
Então, no próximo vídeo,

92
00:05:59,418 --> 00:06:03,237
falaremos de como vetorizar 
ainda mais a regressão logística

93
00:06:03,237 --> 00:06:07,365
e você verá um resultado surpreendente 
em que, sem usar qualquer laço "for",

94
00:06:07,365 --> 00:06:10,695
sem necessitar um laço de repetição 
"for" sobre os exemplos de treinamento,

95
00:06:10,695 --> 00:06:14,760
você poderia escrever o código para 
processar o conjunto de treinamentos inteiro,

96
00:06:14,760 --> 00:06:17,060
basicamente tudo ao mesmo tempo.

97
00:06:17,060 --> 00:06:19,000
Então, vamos ver isso no próximo vídeo.
[Tradução: Renato Barata Gomes | Revisão: Carlos Lage.]