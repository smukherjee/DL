在上一段影片中 我們做的例子是使用
計算圖形來計算函數 J 現在, 讓我們用清理乾淨的計算圖形版本
來教您如何使用它 顯示如何使用它來
計算導數 對於函數 Ｊ 這是一個計算圖形 假設說您想計算
J 的導數相對於 v 所以這是什麼? 這是說
如果我們拿這個 v 的值 改變一點點
 J 的值會怎樣改變? Ｊ是定義為 3 乘 v 現在 v 等於 11 所以如果您提升 v
一點點到 11.001 Ｊ, 也就是 3v
現在是 33 會上升到 33.003 所以這裡
我們的 v 增加 0.001 而淨結果是
J 增加了 3 倍之多 所以 J 導數
相對於 v 等於 3 因為 J 的增加
3 倍於 v 的增加 實際上
這是很類似 我們之前影片的例子
我們有 f(a) = 3a 我們推導出 df/da
稍微簡化 稍微馬虎的記號
您可以寫成 df/da = 3 於是，在這裡我們有 J = 3v 所以 dJ/dv = 3 這裡, Ｊ扮演了 f 的角色 v 扮演了 a 的角色
在我們之前影片中的例子 我們看到用
反向傳播的術語是 如果您想計算
最後變數的導數 也通常是
您最關心的變數 相對於 v, 
那我們已經完成反向傳播的第一個步驟 我們稱之為這個圖形
的一個反向步驟 現在讓我們看另一個例子 dJ/da 是什麼? 換句話說, 如果我們提升一點 a 的值
J 的值會怎樣影響 讓我們用這個例子走下去
現在 a = 5 讓我們提升它成為 5.001 淨影響是對於 v
也就是 a + u, 先前是 11 會增加成為 11.001 而我們已經從上面得知 J 現在提升成為 33.003 所以我們看到如果您
將 a 增加 0.001, J 則會增加 0.003 而所謂增加 a, 我的意思是
您拿這個 5 的值 代進去這個新的值 那 a 的改變會傳播到
計算圖形的右邊, 所以 最後 J 會成為 33.003 J 的增加會是
3 倍於 a 的增加 這個意思是
導數等於 3 一種方式來分解它是
說如果您改變 a 那會改變 v 而經由改變 v
會改變 J 所以 J 值的淨改變
當您提升值時 當您微調 a 的值一點點 首先改變 a
您最終增加 v 好, 那 v 增加多少? 它增加的量
是決定於 dv/da 然後 v 的改變引起
J 的值也會增加 所以微積分中稱為
連鎖律, 如果 a 影響 v 影響 J
那 J 改變的量當您 微調 a 時
 v 的改變量, 當您 微調 a 乘上 
 J 的改變量, 當您微調 v 時 在微積分
這是稱為連鎖律 而從計算中, 我們看到
如果您增加 a 0.001 v 會改變同樣的量 所以 dv/da = 1 實際上, 如果您代入
我們之前的結論 dv/dj = 3 而 dv/da = 1 所以這個 3 乘 1 的乘積 實際上給您
正確的值 dj/da = 3 這個小小的描述顯示了
如何來計算 dJ/dv 也就是
相對於這個變數的導數 可以幫助您計算 dJ/da 所以這是
反向計算的另一個步驟 我這裡要引入
一個新的記號約定 也就是當您在
建置反向傳播時, 寫程式時 總是會有一些最終輸出變數
您真的很在乎 最終輸出變數您真的最關心
或者您想要做最佳化 這種情況下
最後輸出變數是 J 其實是在您的計算圖形
的最終節點 所以很多的計算會是
試著計算那個 最終輸出變數的導數 所以 d of 這個最終變數
相對於其他的變數 我們姑且稱之為 dvar 所以您會有很多的計算
來計算最終 輸出變數, 這個例子是 J
相對於中間變數 像是 a, b, c, u 或者 v 而當您建置軟體時
您如何稱呼這些變數名稱? 您可以在 Python 做的是 您可以給我們一個很長的變數名稱
像是 dFinalOutputVar/dvar 但這實在是很長的變數名稱 您可以直接稱之為 dJdvar 但因為您總是取
對於 dJ 的導數，也就是 對於這個最終的輸出變數
我將引入新的符號 在程式中, 當您計算
這個東西在程式中 我們將使用變數名稱
dvar, 為了表示這個量 所以在程式中 dvar 
表示 您關心的最終輸出變數像是 J 的導數 有時候, 最後這個 l 
相對於一些中間量 您會在您程式中計算 在您的程式中這個東西
您用 dv 來記這個值 所以 dv 會等於 3 您的程式裡
您用 da 代表這個 我們發現
這個也是等於 3 我們已經用這個計算圖形
做部分的反向傳播 讓我們在下一張投影片
完成其他的部分 讓我們用乾淨的
計算圖形副本 重述一遍, 我們已經做到 目前為止, 反向到
發現 dv = 3 再提醒一次，dv 的定義
只是在程式裡的變數名稱 實際上應該是 dJ/dv 我們已經發現 da = 3 再一次, da 只是程式中的變數名稱
實際上是 dJ/da 的值 我們有點像波浪舞一樣反向
從這兩個邊線往回走 現在讓我們繼續計算導數 現在讓我們看 u 的值 所以 dJ/du 是什麼？ 經過類似的計算
就像我們之前做的一樣 我們從 u = 6 開始 如果您提升 u 到 6.001, 那 v 之前是 11, 提升了 11.001 所以 J 從 33 到 33.003 所以 J 的增加是 3x
所以這是三倍 而對於 u 的分析是
類似於我們對 a 的分析 這實際上計算為
 dJ/dv 乘上 dv/du 而這個我們知道是 3 而這個實際上是 1 所以我們往反向傳播下一步走 我們計算 du 也是等於 3 而 du, 當然是 dJ/du 現在我們詳細往最後一步走 所以 dJ/db 為何? 這裡, 想像如果您允許
去改變 b 的值 而您想調整一下
為了要最小化或者 最大化 J 的值 所以這個函數 J 的導數或者 斜率是多少
當您想改變一下 b 的值 實際上使用微積分的連鎖律 這個可以寫成
兩個東西的乘積 dJ/du 乘上 du/db 原因是如果您
改變 b 一點點 所以 b = 3 變成 3.001 它會影響 J 是因為它先影響 u 所以它會影響 u 多少 u 是定義為 b 乘上 c 這個會從 6 當 b = 3時, 到 6.002 因為 c = 2 在我們的例子裡 這個告訴我們 du/db = 2 因為當您提升 b 0.001
u 會增加兩倍的量 所以 du/db 會等於 2 現在, 我們知道 u 
上升兩倍於 b 上升的量 所以 dJ/du 呢? 我們已經發現
這個等於 3 所以將這兩個相乘
我們發現 dJ/db = 6 再次, 這個是
第二部分論點的原因 也就是我們要知道當 u 上升
 0.002, 會影響 J 多少 dJ/du = 3 的事實
告訴我們當 u 上升 0.002
Ｊ上升了三倍的量 所以 J 應該上升 0.006 這是從
dJ/du = 3 的事實而來的 而如果您用數學來檢驗 您會發現如果 b 變成 3.001 u 變成 6.002, v 變成 11.002 所以那是 a + u, 也就是 5 + u 而 J, 是等於 3 乘 v 最終會等於 33.006 所以這是您如何得到 dJ/db = 6 如果填入這個, 這是當我們
反向走, db = 6 而 db 實際上是在 Python 
程式中的變數名稱對於 dJ/db 我不再詳細走
最後一個項目 但實際上如果
您也要計算 dJ/dc 這會是 dJ/du 乘 du/dc 而這會是 9
實際上是 3 乘 3 我不詳細算那個例子 經過最後一個步驟
它是可以推導出 dc 等於 9 從這段影片的關鍵點是
從這個例子, 也就是當計算 導數跟計算所有這些導數
最有效率的方式是 是經由從右到左
跟隨紅箭頭的方向 特別是，我們首先先計算
相對於 v 的導數 然後這會變得很有用 對於計算相對於 a 的導數
以及相對於 u 的導數 然後相對於 u 的導數 這裡這個項目跟
這裡這個項目 這些變成很有用當計算
相對於 b 的導數及 相對於 c 的導數 所以這是計算圖形跟
如何正向或者從左到右 計算成本函數
像是 J 您想要最佳化 然後反向或者從右到左
來計算導數 如果您不熟悉微積分的連鎖律 我知道一些細節
它們很快跑過去 但如果您跟不上這些細節
不用擔心 在下一個影片中 我們會在羅吉斯迴歸分析
複習一遍 告訴您您必須做什麼
來建置這些計算 您需要計算的導數
在羅吉斯迴歸分析中