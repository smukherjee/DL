1
00:00:00,450 --> 00:00:04,786
La capacité qu'offre Python de vous permettre
 d'utiliser les opérations de broadcasting et

2
00:00:04,786 --> 00:00:09,944
plus généralement la grande flexibilité
de la librairie numpy de python est,

3
00:00:09,944 --> 00:00:14,748
selon moi, à la fois une force et
une faiblesse de ce langage.

4
00:00:14,748 --> 00:00:18,393
Je pense que c'est une force en raison
 de la grande expressivité de ce langage.

5
00:00:18,393 --> 00:00:22,547
Je pense que c'est une force car la grande
 flexibilité du langage vous permet
 d'effectuer bien des opérations

6
00:00:22,547 --> 00:00:24,165
avec juste une seule ligne de code.

7
00:00:24,165 --> 00:00:28,530
Mais c'est aussi une faiblesse parce
 qu'avec le broadcasting et cette grande

8
00:00:28,530 --> 00:00:32,610
flexibilité vous pouvez parfois introduire
 des bugs vraiment subtiles

9
00:00:32,610 --> 00:00:36,530
ou des bugs étranges si vous
n'êtes pas familier avec la complexité

10
00:00:36,530 --> 00:00:39,800
du broadcasting et avec la
manière dont le broadcasting fonctionne.

11
00:00:39,800 --> 00:00:44,500
Par exemple, si vous prenez un vecteur 
colonne et l'ajoutez à un vecteur ligne,

12
00:00:44,500 --> 00:00:48,700
vous vous attendez à obtenir 
une erreur de compatibilité
de dimensions ou une erreur de type etc

13
00:00:48,700 --> 00:00:52,620
Mais vous pourriez en fait obtenir une matrice 
comme somme d'un vecteur ligne et

14
00:00:52,620 --> 00:00:54,030
d'un vecteur colonne.

15
00:00:54,030 --> 00:00:58,370
Donc, il y a une logique interne
 à ces effets étranges de Python

16
00:00:58,370 --> 00:01:03,370
mais si vous n’êtes pas familier avec 
Python, j’ai vu certains élèves avoir

17
00:01:03,370 --> 00:01:05,680
des bugs étranges et difficiles à trouver.

18
00:01:05,680 --> 00:01:09,380
Donc dans cette vidéo, je veux partager 
avec vous quelques conseils et astuces

19
00:01:09,380 --> 00:01:12,800
qui m'ont été très utiles pour éliminer ou

20
00:01:12,800 --> 00:01:17,320
simplifier et éliminer tous les bugs 
étranges dans mon propre code.

21
00:01:17,320 --> 00:01:19,280
Et j’espère qu’avec ces astuces,

22
00:01:19,280 --> 00:01:24,193
vous pourrez également écrire beaucoup plus 
facilement du code python et numpy sans bug.

23
00:01:25,430 --> 00:01:30,200
Pour illustrer un des effets les moins
 intuitifs de Python-Numpy,

24
00:01:30,200 --> 00:01:34,990
en particulier comment construire des 
vecteurs en Python-Numpy, permettez-moi 
de faire une démonstration rapide.

25
00:01:34,990 --> 00:01:40,817
Définissons a = np.random.randn(5),

26
00:01:40,817 --> 00:01:45,699
cela crée un vecteur de cinq variables

27
00:01:45,699 --> 00:01:49,640
aléatoires gaussiennes dans le tableau a.

28
00:01:49,640 --> 00:01:55,420
Et nous allons donc print(a)
 et il s’avère que

29
00:01:55,420 --> 00:02:02,740
la forme de a quand vous faites cela,
 c’est cette structure (5,)

30
00:02:02,740 --> 00:02:06,320
C'est appelé un tableau
 de rang 1 en Python et

31
00:02:06,320 --> 00:02:09,750
ce n’est ni un vecteur ligne, 
ni un vecteur colonne.

32
00:02:09,750 --> 00:02:12,570
Et cela l’amène à avoir des effets 
légèrement non intuitifs.

33
00:02:12,570 --> 00:02:17,180
Ainsi, par exemple, si j’affiche la transposée
 de a, ça ressemble exactement à a.

34
00:02:17,180 --> 00:02:20,220
Donc a et transposée de a 
se ressemblent exactement.

35
00:02:20,220 --> 00:02:25,800
Et si j’affiche le produit scalaire entre a 
et transposée de a... vous pourriez penser

36
00:02:25,800 --> 00:02:30,190
que a fois transposée de a est 
peut-être le produit dyadique, 
qui va vous donner une matrice.

37
00:02:30,190 --> 00:02:34,170
Mais si je fais ça,
 je vais en fait avoir un nombre.

38
00:02:34,170 --> 00:02:39,612
Donc je vous recommande, lorsque vous codez
 des réseaux de neurones, de ne pas utiliser

39
00:02:39,612 --> 00:02:46,115
ces structures de données où la forme 
est (5,) ou (n,), ces tableaux de rang 1.

40
00:02:46,115 --> 00:02:52,134
A la place, 
si vous définissez a comme ceci (5, 1),

41
00:02:52,134 --> 00:02:58,764
cela force a à être un vecteur colonne
 de dimensions (5,1).

42
00:02:58,764 --> 00:03:02,399
Avant, la transposée de a 
et a étaient la même chose,

43
00:03:02,399 --> 00:03:06,590
maintenant, la transposée de a 
est un vecteur ligne.

44
00:03:06,590 --> 00:03:08,437
Remarquez une différence subtile.

45
00:03:08,437 --> 00:03:12,213
Dans cette structure de données, 
il y a deux crochets lorsque 
nous affichons la transposée de a.

46
00:03:12,213 --> 00:03:14,460
Alors qu’auparavant,
 il n'y avait qu'un crochet.

47
00:03:14,460 --> 00:03:19,393
Donc, cette différence montre que 
ceci est vraiment une matrice

48
00:03:19,393 --> 00:03:23,481
de 1 par 5, et pas 
un des ces tableaux de rang 1.

49
00:03:23,481 --> 00:03:28,129
Et si vous affichez, disons, le produit 
entre a et transposée de a,

50
00:03:28,129 --> 00:03:32,444
cela vous donne le produit dyadique
 d’un vecteur, OK ?

51
00:03:32,444 --> 00:03:35,795
Et le produit dyadique d’un vecteur 
vous donne une matrice.

52
00:03:35,795 --> 00:03:40,305
Alors, regardons plus en détails
ce que nous avons vu juste ici.

53
00:03:40,305 --> 00:03:43,185
La première commande que nous avons 
lancée, tout à l’heure, était celle ci.

54
00:03:43,185 --> 00:03:47,839
Et cela a créé une structure de données où

55
00:03:47,839 --> 00:03:52,930
a.shape était cette chose bizarre (5,)

56
00:03:52,930 --> 00:03:57,270
qui est appelée tableau de rang 1.

57
00:03:57,270 --> 00:03:58,960
Et c'est une structure 
de données très bizarre.

58
00:03:58,960 --> 00:04:04,000
Il ne se comporte ni comme un vecteur
 ligne, ni comme un vecteur colonne,

59
00:04:04,000 --> 00:04:06,750
ce qui rend certains de 
ses effets peu intuitifs.

60
00:04:06,750 --> 00:04:10,770
Donc ce que je vais recommander, c’est que
 lorsque vous ferez vos exercices

61
00:04:10,770 --> 00:04:14,050
de programmation, lorsque vous 
implémenterez la régression logistique ou

62
00:04:14,050 --> 00:04:19,740
des réseaux de neurones, que vous
 n'utilisiez pas ces tableaux de rang 1.

63
00:04:21,020 --> 00:04:24,098
Au lieu de cela, à chaque fois que
 vous créez un tableau,

64
00:04:24,098 --> 00:04:27,500
vous faites attention à ce que 
ce soit un vecteur colonne, et alors

65
00:04:27,500 --> 00:04:32,360
cela crée un vecteur (5,1), ou 
à ce que ce soit un vecteur ligne,

66
00:04:32,360 --> 00:04:36,670
alors le comportement de vos vecteurs 
sera plus facile à comprendre.

67
00:04:36,670 --> 00:04:43,115
Donc dans ce cas, 
a.shape va être égal à (5,1).

68
00:04:43,115 --> 00:04:48,510
Et cela se comporte beaucoup comme un...
 en fait, c’est un vecteur colonne.

69
00:04:48,510 --> 00:04:53,233
Et c’est pourquoi vous pouvez le considérer 
comme une matrice (5,1), un vecteur colonne.

70
00:04:53,233 --> 00:04:56,880
Et ici a.shape va être (1,5),

71
00:04:56,880 --> 00:05:01,000
et a se comporte toujours
 comme un vecteur ligne.

72
00:05:02,150 --> 00:05:06,258
Donc quand vous avez besoin d’un vecteur,
 je conseille d'utiliser ceci ou cela, mais

73
00:05:06,258 --> 00:05:07,538
pas un tableau de rang 1.

74
00:05:07,538 --> 00:05:12,061
Une autre chose que
 je fais beaucoup dans mon code
 est que si je ne suis pas entièrement sûr

75
00:05:12,061 --> 00:05:17,029
de la dimension de l’un de mes vecteurs, 
je rajoute une instruction d’assertion

76
00:05:17,029 --> 00:05:21,720
comme ça, pour m’assurer, dans ce cas, 
que c’est un vecteur (5,1).

77
00:05:21,720 --> 00:05:23,730
c'est à dire un vecteur colonne.

78
00:05:23,730 --> 00:05:26,900
Ces assertions ne coûtent
 rien en temps de calcul et

79
00:05:26,900 --> 00:05:30,250
elles aident également à servir
 de documentation dans votre code.

80
00:05:30,250 --> 00:05:34,160
Alors n’hésitez pas à ajouter des instructions 
d’assertion comme ça chaque fois que

81
00:05:34,160 --> 00:05:35,320
ça vous semble utile.

82
00:05:35,320 --> 00:05:39,510
Et puis enfin, si vous vous retrouvez 
quand même avec un tableau de rang 1,

83
00:05:39,510 --> 00:05:43,960
Vous pouvez changer sa forme, 
a = a.reshape

84
00:05:43,960 --> 00:05:48,900
par avoir un tableau, 
disons de (5,1) ou de (1,5) pour qu’il 

85
00:05:48,900 --> 00:05:53,750
se comporte de façon consistante comme
 un vecteur colonne ou un vecteur ligne.

86
00:05:53,750 --> 00:05:57,626
Donc j’ai parfois vu des étudiants
 se retrouver avec des bugs difficiles

87
00:05:57,626 --> 00:06:01,119
à trouver, à cause des effets peu
 intuitifs des tableaux de rang 1.

88
00:06:01,119 --> 00:06:06,246
En éliminant les tableaux de rang 1 
dans mon ancien code, je pense que
 mon code est devenu plus simple.

89
00:06:06,246 --> 00:06:09,463
Et je n’ai pas trouvé ça restrictif 
en terme de ce que je pouvais

90
00:06:09,463 --> 00:06:10,335
exprimer en code.

91
00:06:10,335 --> 00:06:12,469
Je n'utilise simplement plus
 de tableau de rang 1.

92
00:06:12,469 --> 00:06:17,090
Pour récapituler, pour simplifier votre code, 
n'utilisez pas de tableaux de rang 1.

93
00:06:17,090 --> 00:06:19,437
Utilisez toujours soit 
des matrice de n par 1, c'est à dire 

94
00:06:19,437 --> 00:06:24,510
des vecteurs colonnes, ou des matrices
 de 1 par n, c'est à dire des vecteurs ligne.

95
00:06:24,510 --> 00:06:26,599
N’hésitez pas à mettre
 un grand nombre d'assertions, pour

96
00:06:26,599 --> 00:06:29,590
vérifier les dimensions 
de vos matrices et tableaux.

97
00:06:29,590 --> 00:06:34,480
Et aussi, n'hésitez pas à utiliser l’opération
 reshape pour vous assurer que

98
00:06:34,480 --> 00:06:38,780
vos matrices et vecteurs 
sont de la bonne dimension.

99
00:06:38,780 --> 00:06:39,420
Maintenant,

100
00:06:39,420 --> 00:06:44,770
J’espère que cette série de suggestions 
vous aide à éliminer une cause de bugs

101
00:06:44,770 --> 00:06:48,840
de votre code Python et vous aident
 à faire l'exercice de programmation.