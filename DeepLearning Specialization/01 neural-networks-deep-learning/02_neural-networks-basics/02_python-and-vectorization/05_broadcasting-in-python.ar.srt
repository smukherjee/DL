1
00:00:00,210 --> 00:00:03,240
في الفيديو السابق،
أشرت إلى أن البث

2
00:00:03,240 --> 00:00:07,040
أسلوب آخر يمكنك استخدامه لتشغيل
التعليمات البرمجية في بايثون بصورة أسرع.

3
00:00:07,040 --> 00:00:11,860
في هذا الفيديو، دعونا نخوض
في كيفية عمل البث في بايثون.

4
00:00:11,860 --> 00:00:14,240
دعونا نمهد لأهمية البث
اليوم بمثال.

5
00:00:14,240 --> 00:00:18,730
في هذه المصفوفة، أظهرت عدد
السعرات الحرارية من الكربوهيدرات،

6
00:00:18,730 --> 00:00:22,320
والبروتينات، والدهون في 100
جرام من أربعة أطعمة مختلفة.

7
00:00:22,320 --> 00:00:25,380
على سبيل المثال، يحتوي
100 جرام من التفاح،

8
00:00:25,380 --> 00:00:29,690
على 56 سُعرًا حراريًا من الكربوهيدرات،
وأقل بكثير من البروتينات والدهون.

9
00:00:29,690 --> 00:00:35,110
بينما في المقابل، 100 جرام من اللحم البقري
تحتوي 104 سعرات حرارية من البروتين

10
00:00:35,110 --> 00:00:37,620
و135 سُعرًا حراريًا من الدهون.

11
00:00:37,620 --> 00:00:43,330
الآن، دعنا نقول أن هدفك هو
حساب النسبة المئوية للسعرات الحرارية

12
00:00:43,330 --> 00:00:48,440
من الكربوهيدرات والبروتينات
والدهون لكل من الأطعمة الأربعة.

13
00:00:48,440 --> 00:00:52,338
هكذا، على سبيل المثال،
إذا كنت تبحث في هذا العمود

14
00:00:52,338 --> 00:00:57,697
وجمعت الأرقام في هذا العمود،
فسترى أن 100 جرام من التفاح

15
00:00:57,697 --> 00:01:02,580
تحتوي على 56 زائد 1,2 زائد 1,8،
وهذا يساوي 59 سُعرًا حراريًا.

16
00:01:02,580 --> 00:01:06,806
وذلك كنسبة مئوية، نسبة

17
00:01:06,806 --> 00:01:11,800
السعرات الناتجة من الكربوهيدرات
في تفاحة سيكون

18
00:01:11,800 --> 00:01:16,932
56 على 59، وهذا تقريبًا 94,9%.

19
00:01:16,932 --> 00:01:22,399
حيث إن معظم السعرات الحرارية
في تفاحة يأتي من الكربوهيدرات، بينما

20
00:01:22,399 --> 00:01:27,630
أغلب السعرات الحرارية الناتجة من
اللحم تأتي من البروتين والدهون وهكذا.

21
00:01:27,630 --> 00:01:33,630
إذًا، فإن العملية الحسابية التي تريدها
هي حقًا جمع كل من الأعمدة الأربعة

22
00:01:33,630 --> 00:01:38,740
لهذه المصفوفة للحصول على إجمالي عدد
السعرات الحرارية في 100 جرام من التفاح

23
00:01:38,740 --> 00:01:40,920
ولحم البقر والبيض والبطاطس.

24
00:01:40,920 --> 00:01:45,090
ومن ثم تقسيم جميع أعمدة المصفوفة،

25
00:01:47,230 --> 00:01:51,230
للحصول على النسبة المئوية للسعرات
الحرارية من الكربوهيدرات والبروتينات

26
00:01:51,230 --> 00:01:54,870
والدهون لكل من الأطعمة الأربعة.

27
00:01:54,870 --> 00:02:01,370
السؤال هو، هل يمكنك القيام بذلك
دون استخدام حلقة for-loop صريحة؟

28
00:02:01,370 --> 00:02:03,290
دعونا نلقي نظرة على
كيفية القيام بذلك.

29
00:02:04,450 --> 00:02:08,602
سوف أوضح لك كيف
يمكنك تعيين،

30
00:02:08,602 --> 00:02:12,990
مثلاً هذه المصفوفة التي
تساوي 4*3، المصفوفة A

31
00:02:12,990 --> 00:02:18,300
ومن ثم بسطر واحد من تعليمات
بايثون البرمجية، سوف نجمع الأعمدة.

32
00:02:18,300 --> 00:02:22,078
إذًا، سنحصل على أربعة أرقام
تقابل العدد الإجمالي

33
00:02:22,078 --> 00:02:25,046
للسعرات الحرارية في هذه الأنواع
الأربعة المختلفة من الأطعمة،

34
00:02:25,046 --> 00:02:28,095
100 جرام من هذه الأنواع
الأربعة المختلفة من الأطعمة.

35
00:02:28,095 --> 00:02:32,113
وسوف أستخدم سطرًا ثانيًا من تعليمات
بايثون البرمجية لتقسيم كل عمود من

36
00:02:32,113 --> 00:02:35,390
الأعمدة الأربعة حسب
مجموعها المقابل.

37
00:02:35,390 --> 00:02:37,250
إذا لم يكن هذا الوصف
اللفظي واضحًا تمامًا،

38
00:02:37,250 --> 00:02:40,670
آمل أن يكون أكثر وضوحًا بعد قليل
عندما ننظر في تعليمات بايثون البرمجية.

39
00:02:40,670 --> 00:02:42,460
ها نحن في دفتر Jupyter Notebook.

40
00:02:42,460 --> 00:02:46,150
لقد سبق أن كتبت هذه الجزئية الأولى
من التعليمات البرمجية لتعبئة

41
00:02:46,150 --> 00:02:49,860
المصفوفة A مسبقًا بالأرقام التي لدينا،
لذا سوف نضغط على Shift + Enter

42
00:02:49,860 --> 00:02:51,220
ونقوم فقط بتشغيل هذا، وهذه مصفوفة A أمامنا.

43
00:02:51,220 --> 00:02:55,080
والآن إليك هذين السطرين من
تعليمات بايثون البرمجية.

44
00:02:55,080 --> 00:02:59,983
أولاً، سنقوم بحساب tau
تساوي a، هذا المبلغ.

45
00:02:59,983 --> 00:03:02,280
وx يساوي 0، مما يعني الجمع بشكل رأسي.

46
00:03:02,280 --> 00:03:05,280
سنقول المزيد عن ذلك بعد قليل.

47
00:03:05,280 --> 00:03:06,076
ثم قم بطباعة cal.

48
00:03:06,076 --> 00:03:07,825
إذًا، سنقوم بالجمع عموديًا.

49
00:03:07,825 --> 00:03:13,735
الآن 59 هو العدد الإجمالي للسعرات
الحرارية في التفاحة، وكان 239

50
00:03:13,735 --> 00:03:19,575
العدد الإجمالي للسعرات الحرارية في اللحم،
ومن ثم البيض فالبطاطس وهكذا.

51
00:03:19,575 --> 00:03:25,151
ومن ثم مع حساب النسبة المئوية

52
00:03:25,151 --> 00:03:30,733
تساوي (1,4)A / cal.reshape

53
00:03:30,733 --> 00:03:33,927
فعليًا، نريد النسب المئوية،
لذا نضرب 100 هنا.

54
00:03:35,913 --> 00:03:38,860
ومن ثم، نطبع النسبة المئوية.

55
00:03:40,800 --> 00:03:41,950
لنقم بتشغيله.

56
00:03:41,950 --> 00:03:46,870
وباستخدام هذا الأمر،
أخذنا المصفوفة A

57
00:03:46,870 --> 00:03:50,820
وقسمناها على مصفوفة 1/4 هذه،

58
00:03:50,820 --> 00:03:52,672
وهذا يعطينا مصفوفة
من النسب المئوية.

59
00:03:52,672 --> 00:03:57,327
إذًا كما أوجدنا النسبة
المئوية للتفاح يدويًا،

60
00:03:57,327 --> 00:04:02,480
كان أول عمود 94,9% من
السعرات الحرارية من الكربوهيدرات.

61
00:04:02,480 --> 00:04:04,000
فلنعد إلى الشرائح.

62
00:04:04,000 --> 00:04:06,310
إذًا، لتكرار سطري التعليمات
البرمجية لدينا،

63
00:04:06,310 --> 00:04:09,940
هذا ما قد كتبته في
ملف Jupyter Notebook.

64
00:04:09,940 --> 00:04:13,306
لإضافة قليل من التفاصيل، هذا المتغير،

65
00:04:13,306 --> 00:04:18,540
(المحور = 0)، يعني أنك تريد أن
يقوم بايثون بالجمع عموديًا.

66
00:04:18,540 --> 00:04:21,567
وبالتالي، إذا كان هذا المحور 0،
فهذا يعني أن الجمع عمودي،

67
00:04:21,567 --> 00:04:24,029
حيث المحور الأفقي هو المحور 1.

68
00:04:24,029 --> 00:04:28,050
إذًا، كتابة المحور 1 أو الجمع أفقيًا
بدلاً من الجمع عموديًا.

69
00:04:28,050 --> 00:04:30,670
ومن ثم هذا الأمر هنا،

70
00:04:30,670 --> 00:04:35,210
هذا مثال لبث بايثون
حيث تأخذ مصفوفة A.

71
00:04:35,210 --> 00:04:43,330
إذًا، هذه مصفوفة 3*4 وأنت
تقسمها على مصفوفة 1*4.

72
00:04:43,330 --> 00:04:47,370
وفعليًا، بعد هذا السطر الأول من
التعليمات البرمجية cal، المتغير cal

73
00:04:47,370 --> 00:04:49,590
عبارة عن مصفوفة 4*1 بالفعل.

74
00:04:49,590 --> 00:04:52,616
إذًا، من الناحية الفنية لا تحتاج إلى استدعاء
إعادة التشكيل هنا مرة أخرى، لذا

75
00:04:52,616 --> 00:04:54,722
هذا في الواقع زائد عن الحاجة.

76
00:04:54,722 --> 00:04:59,140
ولكن عند كتابة تعليمات بايثون البرمجية،
إذا لم أكن متأكدًا تمامًا من تكوين المصفوفة،

77
00:04:59,140 --> 00:05:04,056
ومن أبعاد المصفوفة، فغالبًا ما
أستخدم أمر إعادة التشكيل reshape

78
00:05:04,056 --> 00:05:07,833
فقط للتأكد من أن متجه
العمود أو متجه الصف أو

79
00:05:07,833 --> 00:05:09,500
أيًا ما كان بالشكل الذي تريده.

80
00:05:09,500 --> 00:05:11,840
أمر إعادة التشكيل reshape ذو وقت ثابت.

81
00:05:11,840 --> 00:05:15,150
يتكون من عملية واحدة، وهذا لا يستهلك
وقتًا أو ذاكرة كبيرة على الإطلاق.

82
00:05:15,150 --> 00:05:18,404
لذا لا تخجل من استخدام أمر إعادة
التشكيل reshape للتأكد من أن مصفوفاتك

83
00:05:18,404 --> 00:05:20,830
بالحجم الذي تريده.

84
00:05:21,920 --> 00:05:27,272
الآن، دعنا نشرح بمزيد من التفصيل كيفية
عمل هذا النوع من العمليات، حسنًا؟

85
00:05:27,272 --> 00:05:33,780
كان لدينا مصفوفة 4*3
وقسمناها على مصفوفة 4*1،

86
00:05:33,780 --> 00:05:37,840
إذًا، كيف يمكنك تقسيم
مصفوفة 4*3 على مصفوفة 4*1؟

87
00:05:37,840 --> 00:05:38,860
أو على متجه 4*1؟

88
00:05:40,130 --> 00:05:43,160
لنرى مزيدًا من
الأمثلة على البث.

89
00:05:43,160 --> 00:05:47,920
إذا أخذت متجه 4*1
وأضفته إلى عدد،

90
00:05:47,920 --> 00:05:53,011
فسيقوم بايثون بأخذ هذا
العدد وتمديده تلقائيًا إلى

91
00:05:53,011 --> 00:05:58,180
متجه 4*1 أيضًا،
على النحو التالي.

92
00:05:58,180 --> 00:06:00,257
إذًا، المتجه [1,2,3,4]،

93
00:06:00,257 --> 00:06:04,450
زائد العدد 100 سيتحول إلى
ذلك المتجه على اليمين.

94
00:06:04,450 --> 00:06:09,280
أنت تضيف 100 لكل عنصر،
وفي الواقع نحن نستخدم هذا الشكل من

95
00:06:09,280 --> 00:06:14,365
البث عندما كان الثابت هو
المتغير b في الفيديو السابق.

96
00:06:14,365 --> 00:06:19,414
وهذا النوع من البث يعمل مع
متجهات العمود ومتجهات الصف،

97
00:06:19,414 --> 00:06:24,157
وفي الواقع، في وقت سابق، كنا نستخدم
نموذجًا مماثلاً للبث مع الثابت

98
00:06:24,157 --> 00:06:29,330
الذي كنا نضيفه إلى متجه،
وهو المتغير b في الانحدار اللوجستي.

99
00:06:29,330 --> 00:06:31,610
هذا مثال آخر.

100
00:06:31,610 --> 00:06:35,900
فلنفترض أن لديك
مصفوفة 3*2

101
00:06:35,900 --> 00:06:39,420
وتضيف إليها هذه المصفوفة التي شكلها N*1.

102
00:06:40,950 --> 00:06:45,682
وبالتالي ستكون الحالة العامة إذا كانت لديك

103
00:06:45,682 --> 00:06:50,583
مصفوفة شكلها (m,n) هنا

104
00:06:50,583 --> 00:06:55,330
وأضفتها إلى مصفوفة شكلها (n,1)،

105
00:06:55,330 --> 00:06:58,667
سيقوم بايثون بنسخ المصفوفة m،

106
00:06:58,667 --> 00:07:03,672
عدة مرات ليحوّل هذه إلى مصفوفة شكلها m*n،
لذا بدلاً من مصفوفة 1*3 هذه

107
00:07:03,672 --> 00:07:09,980
سوف ينسخها مرتين في
هذا المثال ليحولّها إلى هذا.

108
00:07:09,980 --> 00:07:14,092
أيضًا، مصفوفة 2*3.
وستقوم بإضافة هؤلاء حتى

109
00:07:14,092 --> 00:07:18,270
تصل إلى المجموع الذي
على اليمين، تمام؟

110
00:07:18,270 --> 00:07:21,583
لقد أخذت وأضفت 100
إلى العمود الأول،

111
00:07:21,583 --> 00:07:25,812
وأضفت 200 إلى العمود الثاني،
و300 إلى العمود الثالث.

112
00:07:25,812 --> 00:07:28,796
وهذا أساسًا ما فعلناه
في الشريحة السابقة،

113
00:07:28,796 --> 00:07:32,810
إلا أننا استخدمنا عملية قسمة
بدلاً من عملية إضافة.

114
00:07:34,180 --> 00:07:40,402
مثال أخير، إن كانت
لديك مصفوفة (m,n)

115
00:07:40,402 --> 00:07:46,260
وأضفتها إلى متجه (1,m)،
أي مصفوفة (1,m).

116
00:07:47,310 --> 00:07:50,760
ثم نسخت هذا فقط n مرات أفقيًا.

117
00:07:50,760 --> 00:07:53,510
حتى ينتهي بك الأمر إلى مصفوفة (m,n).

118
00:07:53,510 --> 00:07:56,990
يمكنك تخيل نسخه
أفقيًا ثلاث مرات،

119
00:07:56,990 --> 00:07:58,650
ويمكنك إضافة تلك.

120
00:07:58,650 --> 00:08:01,070
إذًا، عند إضافتها سيصبح لدينا هذا في نهاية المطاف.

121
00:08:01,070 --> 00:08:06,890
لقد أضفنا 100 إلى الصف الأول
وأضفنا 200 إلى الصف الثاني.

122
00:08:08,270 --> 00:08:12,061
هذا هو المبدأ الأعم
عن البث في بايثون:

123
00:08:12,061 --> 00:08:17,353
إذا كانت لديك مصفوفة (m,n) وقمت بالإضافة أو

124
00:08:17,353 --> 00:08:24,409
الطرح أو الضرب أو القسمة
مع مصفوفة (n,1)،

125
00:08:24,409 --> 00:08:31,177
فسيؤدي هذا إلى نسخها n من
المرات إلى مصفوفة (m,n).

126
00:08:31,177 --> 00:08:33,781
ومن ثم تطبيق
الإضافة والطرح

127
00:08:33,781 --> 00:08:36,140
والضرب أو القسمة لكل عنصر.

128
00:08:37,250 --> 00:08:42,250
على العكس من ذلك، إذا كانت لديك مصفوفة (m,n)
وقمت بإضافة أو طرح أو ضرب

129
00:08:42,250 --> 00:08:49,060
أو قسمة على مصفوفة (m,1)، يتم
نسخ هذه الآن n من المرات أيضًا.

130
00:08:49,060 --> 00:08:54,740
وتتحول تلك إلى مصفوفة (m,n) ثم
يتم تطبيق العملية على جميع العناصر.

131
00:08:54,740 --> 00:09:00,327
شكل آخر من البث،
هو عندما تكون لديك مصفوفة (1,m)،

132
00:09:00,327 --> 00:09:05,175
وفعليًا يكون هذا متجه عمودي
مثل [1,2,3]، ومن ثم تضيف

133
00:09:05,175 --> 00:09:08,482
أو تطرح أو تضرب أو
تقسم على رقم صف.

134
00:09:08,482 --> 00:09:11,080
إذًا، ربما تكون مصفوفة (1,1)،

135
00:09:11,080 --> 00:09:16,117
مثل هذا زائد 100،
ثم تنتهي إلى نسخ

136
00:09:16,117 --> 00:09:23,512
هذا العدد الحقيقي n من المرات إلى
أن تحصل على مصفوفة (n,1) أخرى،

137
00:09:23,512 --> 00:09:29,700
ومن ثم يمكنك إجراء العملية، مثل الإضافة
في هذا المثال، لكل عنصر.

138
00:09:29,700 --> 00:09:35,823
وهناك شيء مماثل أيضًا
لمتجهات الصف.

139
00:09:38,281 --> 00:09:43,730
تستطيع النسخة العامة الكاملة للبث
أن تقوم بأكثر من ذلك بعض الشيء.

140
00:09:43,730 --> 00:09:49,080
إذا كنت مهتمًا،
يمكنك قراءة وثائق

141
00:09:49,080 --> 00:09:52,240
نمباي، والاطلاع على معلومات
البث في تلك الوثائق.

142
00:09:52,240 --> 00:09:56,380
سيعطيك ذلك تعريفًا أعم
.بعض الشيء عن البث.

143
00:09:56,380 --> 00:10:00,140
ولكن ما رأيته على الشرائح هي الأشكال
الرئيسية للبث التي ستحتاجها

144
00:10:00,140 --> 00:10:02,560
عندما تقوم بتنفيذ
شبكة عصبية.

145
00:10:03,890 --> 00:10:06,840
قبل الختام، هناك
تعليق أخير، وهو لمن

146
00:10:06,840 --> 00:10:10,210
اعتاد البرمجة باستخدام
إما MATLAB أو

147
00:10:10,210 --> 00:10:15,760
Octave، إذا كنت قد استخدمت في أي وقت مضى
دالة bsxfun في MATLAB أو OCTAVE

148
00:10:15,760 --> 00:10:20,590
في برمجة الشبكة العصبية، فإن bsxfun تقوم
بشي مشابه، ليس تمامًا نفس الشيء.

149
00:10:20,590 --> 00:10:25,750
ولكن غالبًا ما يتم استخدامها لغرض
مماثل لما نستخدم البث في بايثون له.

150
00:10:25,750 --> 00:10:28,505
ولكن هذا حقًا لا ينطبق إلا
على مستخدمي MATLAB

151
00:10:28,505 --> 00:10:31,600
وOctave المتقدمين جدًا، وإن لم تسمع
عن هذا من قبل، فلا تقلق بشأن ذلك.

152
00:10:31,600 --> 00:10:35,524
لا تحتاج إلى معرفته عندما تكتب التعليمات
البرمجية في الشبكات العصبية في بايثون.

153
00:10:35,524 --> 00:10:38,720
إذًا، هذا كان البث في بايثون،

154
00:10:38,720 --> 00:10:42,360
وآمل أنه عند قيامك بتدريبات البرمجة
أن يتيح لك البث

155
00:10:42,360 --> 00:10:44,580
ليس فقط تسريع تشغيل التعليمات البرمجية،

156
00:10:44,580 --> 00:10:48,920
بل أيضًا مساعدتك في الحصول على ما تريد
بعدد أقل من أسطر التعليمات البرمجية.

157
00:10:50,360 --> 00:10:53,630
قبل أن تخوض في تمرينات البرمجة،
أريد أن أشارك معك

158
00:10:53,630 --> 00:10:56,290
مجموعة إضافية من الأفكار،
وهي أن هناك بعض النصائح

159
00:10:56,290 --> 00:11:00,700
والأساليب التي وجدت أنها تقلل
عدد الأخطاء في برمجتي في بايثون

160
00:11:00,700 --> 00:11:02,640
والتي آمل أنها قد تساعدك أيضًا.

161
00:11:02,640 --> 00:11:05,550
لذا دعونا نتحدث عن
هذا في الفيديو التالي.