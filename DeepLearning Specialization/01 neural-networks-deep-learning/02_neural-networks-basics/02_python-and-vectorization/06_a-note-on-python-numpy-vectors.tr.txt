Python'un broadcasting işlemleri yeteneği daha genel anlamda, python numpy program
dilinin büyük esnekliği bence hem dile güç katıyor aynı zamanda zaafı oluyor. Güç veren bir özellik bence, dilin anlaşılmasını kolaylaştırır Dilin bu esnekliği
daha fazla şeyi bir satır kod ile yazmanıza izin verir. Ancak, bazen zaaf olarak da düşünülebilir
çünkü eğer broadcasting'in ve broadcasting'e benzer özelliklerin nasıl çalıştığına aşina değilseniz broadcasting ve onun çok fazla esnekliği sayesinde bazen hemen göze çarpmayan ya da çok garip gözüken hatalar oluşturabilirsiniz. Örneğin, bir sütun vektör alıp bir satır vector 
ögesine eklemek istiyorsanız boyut uyuşmazlığı veya tur 
hatası gelmesini düşünebilirsiniz. ama size bir matris verebilir, satir vektörü ve sütun vektörünün toplamından oluşan. Aslanda Python dilinin bu gariplikleri 
yapma sinin arkasında bir mantık var. Ama Python ile aşina değilseniz, 
ben bazı öğrencilerin çok garip yazılım hatalarıyla karşılaştığını gördüm. Bu videoda, yazdığım kodlardaki tuhaf<br /> görünen bazı hataların üstesinden gelmeme ve bazen de problemi çözerken <br /> kodumu da basitleştirmeme yardımcı olan bazı ipuçlarını ve püf <br />noktaları sizlerle paylaşmak istiyorum. Umarım sizler de bu ipuçlarını <br /> ve püf noktaları kullanarak rahatlıkla hatalardan arındırılmış Python veya
Numpy kodu yazabileceksiniz. Python-Numpy'ın özellikle vektör oluşturmak <br /> gibi deneyime / sezgiye daha az dayalı işlemlerinin etkisini gözlemlemek için hızlıca bir örnek vermeme izin verin. a = np.random.randn(5) diyelim Böylece içinde 5 Gaussian değişkeni olan bir a dizisi oluşturmuş olduk. a dizisinin içeriğini görmek için print(a) yazalım. Bunu yaptığınızda a'nın şeklinin (5,) <br />şeklinde tanımlandığını görüyoruz. Bu dizi Python'da 1. dereceden <br />bir dizi olarak adlandırılır ve ne sütun vektörü<br /> ne de satır vektörüdür. Bu durum bazı beklenmeyen sonuçlara yol açabilir. Örneğin, a'nın devriğini(transpoz) yazdırmak, <br />a'yı yazdırmak ile aynı olur. Sonuç olarak a ve a.T birbirinin aynısıdır. Eğer a ve a'nın devriğinin <br />skaler çarpımını hesaplayacak olursak a ve a.T'nın çarpımı matriks çarpımı olabilir, belki de <br />sonucumuz bir matriks olabilir diye düşünebilirsiniz. Fakat bu işlemi yaparsanız, <br />tek bir sayıdan ibaret olduğunu görürsünüz. Nöral ağlar oluşturuyorsanız size önerim, yapısı (5,) veya (n,) veya 1. dereceden dizi<br /> olmayan veri yapıları kullanmanız. Onların yerine, a'yı bu şekilde tanımlarsanız bu tanım, a'yı (5,1) boyutunda bir sütun vektörü yapar. Az önce a'ya eşit görünen a.T'yi şimdi hesaplarsak a.T'nin şimdi bir sıra vektörü olduğunu gözlemleriz. Aralarındaki şu ince farka dikkat edin Şu an kullandığımız yapıda a.T'yi <br />hesapladığımızda iki köşeli parantez görüyoruz, fakat az önce tek bir köşeli parantez görüyorduk. (5,1) boyutunda bir matriks ile 1. dereceden dizi arasındaki fark bu. Ve şimdi a ve a.T çarpımını hesaplarsak bu bize bir vektörün dış çarpımını verecektir, değil mi? Ve bir vektörün dış çarpımı <br />bize bir matriks verecektir. Şimdi, burada gördüklerimizi <br />daha detaylı bir şekilde inceleyelim Henüz az önce yazdığımız ilk komut buydu. Bu bize yapısı şaşırtıcı bir şekilde (5,) olan bir veri yapısı oluşturdu. Bu, 1. dereceden bir dizi olarak adlandırılır. Bu çok komik bir veri yapısı çünkü bir sütun vektörü olarak veya <br />bir satır vektörü olarak davranmıyor. Bu durumda, bu yapının sebep olduğu bazı etkiler<br /> deneysellikten uzaklaşıyor. Benim önerim, programlama egzersizlerinizi çözerken, hatta lojistik regresyon uygularken veya nöral ağlar oluştururken bu 1. dereceden dizileri kullanmamanız. Bunun yerine, bir dizi oluşturduğunuzda bu diziyi sütun vektörü, bu durumda (5,1)lik bir vektör, veya bir sıra vektörü olarak oluşturursanız, vektörlerinizin nasıl davranacağını<br /> daha iyi anlayabilirsiniz. Burada, a (5,1) boyutunda bir sütun vektörü, ve o şekilde davranacaktır. Bu sayede a'yı (5,1)lik bir matriks olarak,<br /> bir sütun vektörü olarak düşünebiliriz. Burada ise a, (1,5) boyutunda bir sıra vektörü ve tam olarak bir <br />sıra vektörü olarak davranacaktır. Sonuç olarak, bir vektöre ihtiyacınız olduğunda,<br />bunu veya bunu kullanmanızı öneririm. 1. dereceden bir dizi kullanmanızı değil. Sık sık kullandığım başka bir yöntem ise, vektörlerimden birinin boyutlarından emin olmadığımda<br /> örneğin bunun (5,1) olduğundan emin olmak için buradaki gibi bir assert fonksiyonu çağırmak. Yani bu bir sütun vektörü. Bu assert fonksiyonları gerçekten<br /> düşük maliyetli olmalarının yanı sıra kodunuzun daha anlaşılır olmasına yardımcı olurlar. Bu yüzden istediğiniz zamanlarda yazmaktan çekinmeyin. Ve son olarak, herhangi bir sebepten dolayı <br />1. dereceden bir dizi elde ederseniz bu diziyi a eşittir a.reshape diyerek (5,1) veya (1,5) boyutunda bir diziye çevirebilirsiniz. Böylece satır veya sütun vektörü olarak <br />daha düzgün davranmasını sağlarsınız. Bazen öğrencilerin hataları bulmakta <br />çok zorlandıklarını görüyorum, bunun sebebi 1. dereceden dizilerin<br /> beklenmeyen sonuçlara yol açabilmesi. Bence 1. dereceden diziler <br />kullanmayarak kodumu basitleştiriyorum. Ve bu dizileri kullanmamanın yazdığım kodu sınırlanmadığını gördüm. Ben hiç 1. dereceden dizi kullanmadım. Kodu basitleştirmek için 1. dereceden dizi kullanmayın. Her zaman ya nx1 matris yani sütun vektörü, ya da <br />1xn matris yani satır vektörü kullanın. Bir çok assertion fonksiyonu kullanmaktan çekinmeyin, bunları kullanarak matris ve dizilerinizin<br /> boyutlarını tekrar tekrar kontrol edin. Ek olarak, kullandığınız yapıların boyutlarından emin olmak için reshape fonksiyonunu kullanmaktan çekinmeyin Bir marka Umarım bu videodaki öneriler kodunuzdaki hataları çözmenize yardımcı olur ve çözdüğünüz <br />egzersizleri sizin için kolaylaştırır.