الإمكانية التي تخولك بها
بايثون من استخدام عمليات البث وبصورة أعم، المرونة الكبيرة
في لغة برمجة بايثون نمباي هي على ما أعتقد تمثل
نقطة قوة ونقطة ضعف في لغة البرمجة. أعتقد أنها قوة لأنها
تخلق التعبيرية للغة. تتيح لك المرونة الكبيرة للغة
إنجاز الكثير من خلال سطر واحد من التعليمات البرمجية فقط. ولكن هناك نقطة ضعف أيضًا
لأنه مع البث وهذا المقدار الكبير من المرونة، قد تتسبب
بأخطاء غير ملحوظة أحيانًا أو أخطاء غير مألوفة،
إذا لم تكن على دراية بتعقيدات كيفية البث وكيفية
عمل ميزات مثل البث. علي سبيل المثال، إذا أخذت متجه عمود
 وأضفته إلى متجه صف، فقد تتوقع أن يرفض ذلك بسبب اختلاف الأبعاد أو خطأ في النوع
أو شيء من هذا القبيل. لكن قد تحصل في الواقع على مصفوفة
هي عبارة عن مجموع متجه الصف ومتجه العمود. لذلك هناك منطق داخلي 
 لهذه التأثيرات الغريبة لبايثون. لكن إذا لم تكن لديك دراية بلغة بايثون،
فقد رأيت بعض الطلبة يواجهون أخطاءً غريبة جدًا، أخطاء إيجادها بالغ الصعوبة. لذا ما سنفعله في هذا الفيديو هو
مشاركة بعض التلميحات والنصائح التي وجدتها مفيدة
لي لتجنب أو لتبسيط وتجنب كل الأخطاء الغريبة
في التعليمات البرمجية الخاصة بي. وآمل من خلال هذه
التلميحات والنصائح، أن تكون أنت أيضًا قادرًا على كتابة
تعليمات بايثون ونمباي البرمجية الخالية من الأخطاء. لتوضيح أحد أقل الآثار البديهية
من بايثون-نمباي، خاصة كيف نقوم بإنشاء متجهات باستخدام
بايثون-نمباي، اسمحوا لي أن أقدم عرضًا توضيحيًا سريعًا. دعونا نعيّن a = np.random.randn(5)‎، هذا ينشئ 5 متغيرات عشوائية غاوسية مخزنة في المصفوفات a. لذا دعونا نكتب print(a)‎
والآن يظهر لنا أن شكل a عندما نفعل ذلك
هو هذه البنية المكونة من (5,). وهذه تسمى مصفوفة
من الدرجة الأولى في بايثون وهي ليست متجه صف
وليست متجه عمود. وهذا يقودنا إلى بعض
الآثار غير البديهية الطفيفة. على سبيل المثال، إذا كتبت a منقولة (a, T)
فإنه ينتهي به الحال ليبدو مثل a. لذا فإن a و(a, T)
ينتهي بهما الحال ليكونا متماثلين. وإذا طبعت الناتج الداخلي
بين a و(a, T)، فقد تعتقد أن a مضروبة في (a, T)، قد تكون الناتج الخارجي،
وينبغي أن تعطيك مصفوفة ربما. ولكن إن فعلت ذلك
فستحصل بدلاً من ذلك على رقم. لذا ما سأنصح به هو أنه
عندما تقوم ببرمجة شبكات جديدة، فلا تستخدم بنى البيانات
التي لها شكل 5، أو n، لمجموعة من الدرجة الأولى. بدلاً من ذلك، إذا قمت بتعيين a لتكون هكذا (5,1) هذا يلزم a أن
تكون متجه عمود (5,1). وحيث بدا في السابق أن a و(a, T)
متماثلان، الآن تصبح (a, T)،
الآن (a, T) هي a متجه صف. لاحظ الاختلاف الدقيق. في بنية البيانات هذه هناك قوسان مربعان
عندما نطبع (a, T). حيث كان هناك
قوس مربع واحد سابقًا. إذًا هذا هو الفرق بينهما،
هذه حقيقة مصفوفة 1 في 5 مقابل تلك المصفوفات
من الدرجة الأولى. وإذا طبعت، لنقل،
الناتج بين a و(a, T)، هذا سوف يعطيك
الناتج الخارجي للمتجه، صحيح؟ وهكذا، الناتج الخارجي للمتجه
يعطيك مصفوفة. لذا، دعونا ننظر بمزيد من التفصيل
فيما رأيناه للتو الأمر الأول الذي قمنا بتشغيله
قبل قليل كان هذا. وأدى هذا إلى إنشاء بنية بيانات مع a.shape كان هذا الشيء المضحك (,5) لذا هذا يدعى مصفوفة من الدرجة الأولى. وهي بنية بيانات مضحكة. هي لا تتصرف بانتظام كمتجه صف
ولا كمتجه عمود، مما يجعل بعض آثارها
غير بديهية. لذا ما سأنصح به هو التالي
عندما تحل تمارين البرمجة الخاصة، أو في الحقيقة عندما تطبق الانحدار اللوجيستي أو الشبكات العصبية، عليك فقط
ألا تستخدم هذه المتسلسلات ذات الدرجة الأولى. بدلاً من ذلك، في كل
مرة تنشئ بها مصفوفة التزم بجعلها إما
متجه عمود، هذا ينشئ متجه (5,1)
أو التزم بجعلها متجه صف، عندها سيكون سلوك متجهاتك
أسهل للفهم ربما لذا في هذه الحالة،
a.shape ستكون متساوية لـ 5,1. وهو يتصرف كثيرا مثل، لكنه
في الحقيقة، هو متجه عمود. وهذا يفسر لماذا بإمكانك التفكير فيه كأنه
مصفوفة (5,1) حيث إنها متجه عمود. وهنا a.shape سيكون 1,5، وهذا يتصرف بانتظام
كمتجه صف. لذا عندما تحتاج متجهًا، فاستخدم
إما هذا أو ذاك، و لكن لا تستخدم مصفوفة من الدرجة الأولى. أمر إضافي آخر أفعله كثيرًا في تعليماتي البرمجية هو
إذا لم أكن متأكدًا تمامًا ما أبعاد أحد متجهاتي،
عادة سأضعها في جملة تأكيد هكذا، لأتحقق، في هذه الحالة،
أن هذا متجه (5,1). إذًا هذا متجه عمود. يتم تعيين هذه التأكيدات
إلى تنفيذ بالإضافة إلى أنها تخدم كتوثيق
لتعليماتك البرمجية. لذا لا تتردد بوضع جمل تأكيدية
مثل هذه حالما شعرت أنك ترغب بذلك. وأخيرًا، إذا واجهتك، لأي سبب من الأسباب
مصفوفة من الدرجة الأولى، بإمكانك تغير شكلها هكذا a تساوي a.reshape إلى، دعنا نقل مصفوفة (5,1) أو مصفوفة (1,5) لذا ستتصرف بانتظام أكبر
كمتجه عمود أو متجه صف. لذا في بعض الأحيان رأيت طلابًا
ينتهون إلى مشكلة صعبة التتبع بسبب هذه الآثار غير البديهية
للمصفوفات من الدرجة الأولى. باستبعاد المصفوفات من الدرجة الأولى من تعليماتي البرمجية القديمة،
أعتقد أن تعليماتي البرمجية أصبحت أبسط. وحقيقة لم أجدها مقيدة
من حيث الأمور التي بإمكاني التعبير عنها بالتعليمات البرمجية. لم أستخدم مصفوفة من الدرجة الأولى مطلقًا. لذا النقاط الأساسية لتبسيط التعليمات البرمجية
لا تستخدم متسلسلات ذات الدرجة الأولى. دائمًا استخدم إما مصفوفات n في 1، أساسًا متجهات عمود، أو مصفوفات 1 في n
أو أساسًا متجهات صف. أطلق العنان لنفسك لوضع
الكثير من عبارات التأكيد لذا تحقق مرة أخرى من
أبعاد مصفوفاتك ومتسلسلاتك. ولا تكن خجولاً في استدعاء عملية
تغيير الشكل للتأكد أن مصفوفاتك أو متجهاتك
بالأبعاد التي ينبغي أن تكون عليها لذا، آمل أن هذه المجموعة من المقترحات
ستساعدك في استبعاد سبب للأخطاء من تعليمات بايثون البرمجية، وجعل
إكمال تمارين حل المشاكل أسهل لك.