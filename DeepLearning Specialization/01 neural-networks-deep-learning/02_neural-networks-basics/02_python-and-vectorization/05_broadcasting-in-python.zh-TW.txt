在前面的影片中
我提過傳播 是您可以使用的另一個技巧
讓您的 Python 程式跑得更快 在這段影片中, 讓我們深入研究
Python 的傳播實際上如何作用 讓我們用一個例子來看為什麼使用傳播 在這個矩陣我顯示了
碳水化合物 蛋白質, 跟‑脂肪的卡洛里在四個 100 克的食物中 舉個例子
 100 克的蘋果 有 56 卡從碳水化合物來
而極少從蛋白質跟脂肪來 而相對的, 100 克
牛肉有 104 卡從蛋白質來 135 卡從脂肪來 現在假設您的目標是
計算卡洛里的比例 從碳水化合物, 蛋白質
脂肪對於這四種食物 舉個例子
如果您看這個列 總和這列的數字
您得到 100 克的蘋果 有 56 加 1.2 加 1.8 
 總共 59 卡 所以卡洛里的比例 在蘋果從碳水化合物是 56 除以 59, 約 94.9% 大部分蘋果的卡洛里
大部分從碳水化合物來, 而相對的 牛肉的卡洛里大部分
從蛋白質跟脂肪來 所以您想要的計算實際上是
總和每一個列 在這個矩陣上得到總共的
卡洛里數目在 100 克的蘋果 牛肉, 蛋 跟馬鈴薯 然後逐一除上這個矩陣的元素 如此來獲得
碳水化合物, 蛋白質 跟脂肪的比例對於四種食物 問題是, 您可以做這些
而不用到明顯的迴圈嗎? 我們來看怎麼做 我要做的是
您可以如何設定 這個矩陣為
 3 乘 4 矩陣 A 然後用一行 Python 程式
我們將按列總和 我們會得到四個數字
相當於總共 的卡洛里數字的對於這四種
不同種類的食物 100 克的這四種
不同種類的食物 我用第二行 Python 程式
來除以每一列 的
相對的和 如果語言的描述
不是很清楚 希望等一下
當您看到 Python 程式時會比較清楚 所以我們用 Jupyter notebook 我已經寫了這第一個
程式來先產生 矩陣 A 有之前那些數字
我們按 shift enter 來跑這個程式, 所以用這個矩陣 A 現在有兩行
 Python 程式 首先，我們先計算
 cal 等於 A.sum axis = 0 意思是垂直和 我們等一下會談到 然後印出 cal 所以我們做垂直和 59 是
蘋果的卡洛里總和, 239 是牛肉卡洛里的總和
還有蛋跟馬鈴薯等等 然後來計算百分比 等於 A/cal.reshape(1,4) 實際上我們要百分比
所以要乘以 100 然後印出這百分比 percentage 我們來跑這個程式 所以
這個指令我們拿矩陣 A 然後 除以這個 1 乘 4 矩陣 而這給了我們
百分比的矩陣 我們計算出了先前
用手算而現在 在第一列 94.9% 
是從碳水化合物的卡洛里 讓我們回到投影片 先重複
之前的兩行程式 這是之前我們寫在
 Jupyter notebook 上 一點點小細節有關這參數 (axis=0), 意思是您
要 Python 垂直和 所以如果是 axis - 0 
意思是垂直和 如果是水平軸就會是 axis = 1 所以寫成 axis = 1 
就是水平和而不是垂直和 而然後這個指令 這是 Python 
傳播的例子, 您拿矩陣 A 所以這是一個 3 乘 4 矩陣
您除以一個 `1 乘 4 矩陣 技術上而言, 經過這第一行
程式, 這 cal 變數 已經是 1 乘 4 矩陣 所以基本上您不需要
再一次呼叫 reshape 這有一點多餘 但當我寫 Python 程式時
如果我不確定這個矩陣 這個矩陣的維度, 我通常
會寫下 reshape 指令來 確認那是正確的
列向量或者行向量 您所希望的 這個 reshape 指令是常數時間 是一個操作單元 1 的運算
非常便宜的呼叫函數 所以不用害羞來使用 reshape
指令來確定您的矩陣 是您需要的大小 現在讓我來詳細解釋
這類型的運算如何運作 我們有 3 乘 4 矩陣
我們將它除以一個 1 乘 4 矩陣 我們要如何用 3 乘 
4矩陣除以 1 乘 4 矩陣 或者說 1 乘 4 向量 讓我們看一些
傳播的例子 如果您拿 4 乘 1 向量
加上一個數字 Python 會拿這個數字
自動展開 變成 4 乘 1 向量
像這樣 所以這個向量 [1,2,3, 4] 加上數字 100 最終會是
在右邊這個向量 您在每一個元素加 100
實際上我們用這樣的 傳播在先前的影片中當時用的常數是
參數b 而這樣的傳播可用
於列向量跟行向量 實際上前面我們用了類似的
傳播使用常數 我們加入一個向量
就是參數 b 在羅吉斯迴歸分析 這裡有另一個例子 假設您有 2 乘 
3 矩陣 加上這個 1 乘 n 矩陣 一般化以後會是如果您 有一 (m, n) 矩陣 加上一個 (1, n) 矩陣 Python 會這樣複製這個矩陣 m 次 變成一個 m 乘 n 矩陣
與其用這個 1 乘 3 矩陣這例子它會複製兩次
變成這樣 同樣也是 2 乘 3 矩陣
而我們相加 您最終會得到右邊這個和
是吧? 所以您
加 100 到第一列 加 200 到第二列
加 300 到第三列 基本上這是我們
在前面投影片做的 除了我們使用除法
而不是加法 最後一個例子
您有一個 (m, n) 矩陣 您加這個 (m, 1) 向量
(m, 1) 矩陣 只要水平複製這個 n 次 您最終會得到一個 (m, n) 矩陣 您可以想像成
水平複製它三次 然後加起來 當您加完之後您會得到 我們加 100 到第一行
加 200 到第二行 這個是
Python 傳播更一般化的原則 如果您有一個 (m, n) 矩陣而您加或 減或乘或除一個 (1, n) 矩陣 那這個會複製m
次變成 (m,n) 矩陣 然後在應用加
減 乘, 除到每一個元素 如果相反地, 您拿 (m,n) 
矩陣做加, 減, 乘 除一個 (m,1) 矩陣
那這也是會複製 n 次 變成 (m,n) 矩陣
在每個元素應用那個運算 還有一種傳播
也就是如果您有ㄧ (m,1) 矩陣 所以這實際上是一個列向量
像 [1,2,3] 然後您加, 減, 乘, 或
除一個數字 或許是一個 (1,1) 矩陣 所以像是加 100
那您會複製 這個實數 n 次直到您
得到另一個 (n,1)矩陣 然後您在這個例子逐一元素地應用這個運算像是
加法 類似的事情也適用於
行向量 完整的傳播一般化版本
甚至可以做得更多 如果您有興趣您可以
閱讀這些文件 numpy, 然後找
文件中的傳播部份 那會給稍微更多
一般化的傳播定義 但在這投影片中是主要
型態的傳播您 在建置神經網路時會用到的 在總結之前
最後一個註解, 就是 您如果使用過
程式語言像是 matlab 或 octave, 如果您曾使用 matlab 或
 Octave 函數 bsxfun 在神經網路程式中 bsxfun 
做類似的事, 但並不完全相同 但它通常用在跟我們使用Python 傳播時同樣的目的 但這真的只對
非常進階的 matlab 跟 Octave 使用者, 如果您不曾聽過
不用擔心 您並不需要知道這個當您
用 Python 來做神經網路的程式 所以,這就是 Python 的傳播 我希望當您做程式
作業時傳播會讓您 不只讓程式跑得更快 也幫您得到您要做的
僅用更少行的程式 在您進入程式
作業之前, 我想分享您 一個想法
就是一些提示 跟技巧我發現來
減低我 Python 程式的錯誤 我希望會幫到您 所以
讓我們在下一段影片談這個