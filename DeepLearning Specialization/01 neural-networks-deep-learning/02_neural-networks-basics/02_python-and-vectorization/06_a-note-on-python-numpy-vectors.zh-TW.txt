Python 能夠讓您
使用傳播運算 更一般來說, Python numpy 的強大靈活性是 有強處
也有弱點的程式語言 它的長處是因為
它的表達力 它極大的靈活性
讓您即使用一行程式也可以 做很多事 但它的弱點也因為
傳播的極大 靈活性有時候
您會有微妙的臭蟲或者 莫名其妙的臭蟲, 如果您不
熟悉錯綜複雜的 傳播跟
傳播的特徵如何作用 舉個例子, 舉個例子如果您拿列向量
加到行向量，您會 期望它丟出維度
不匹配或是類型錯誤等等 但您也許真的得到
一個矩陣是行向量跟 列向量的和 所以這是一個有很奇怪影響的Python 內部邏輯 但如果您不熟悉 Python 
我看過很多學生有很奇怪 很難發現的臭蟲 所以我想在這一段影片
分享您一些提示跟 技巧已經很有用的
為我消除或 簡化跟去掉所有我的程式奇怪
的臭蟲 我希望這些提示跟技巧 您也能夠更容易
寫出沒有臭蟲的 Python, numpy 程式 為了描述一個比較不
直觀的影響對於 Python Numpy 尤其是您如何建立
Python Numpy 向量, 讓我做一個快速的展示 假設 a = np.random.randn(5) 這會建立一個 5 個隨機高斯亂數 儲存在陣列 a 中 讓我們 print(a)
它會印出 而它的 shape 當您這樣做時
是 5 逗點結構 而這在 Python 是稱為等級
1陣列 它既不是行向量
也不是列向量 而這會導致一些
輕微非直觀的效果 舉個例子, 如果我印轉置
它會跟 a 看起來一樣 所以 a 跟
a 轉置看起來一樣 如果我印 a 跟 a 轉置的內積
您也許想 a 乘 a 轉置也許是外積
應該或許給您一個矩陣 但如果我這樣做
您會得到一個數字取而代之 所以我會這樣建議
當您做神經網路程式時 您盡量不用這種資料結構
這種 5, 或 n, 等級1陣列 取而代之, 如果您設它為 (5,1) 這個會保證是
一個 (5,1) 列向量 而之前, a 跟
a 轉置看起來一樣 如果現在您印 a 轉置
a轉置會是一個行向量 請注意一個細微的差別 在這種資料結構，有兩個
方括弧當我們列印轉置 而之前
只有一個方括弧 這個就是不同點
介於一個真的 1 乘 5 矩陣跟一個
等級1陣列 如果您列印
a 跟a 轉置的乘積 這會給您一個
向量的內積, 是吧? 一個向量的外積
給您ㄧ個矩陣 讓我們更詳細地
看一下我們剛剛看到的 我們執行第一個指令
是這個 而這個建立一個資料結構 a.shape 是這個有趣的 (5,) 這個稱為等級1陣列 這是一個非常有趣的資料結構 它表現得並不一致為
行向量或者列向量 而使得它的一些
影響並不直觀 我的建議是
當您做您的程式 作業或者當您
建置羅吉斯迴歸分析或 神經網路時
不要用這個等級1陣列 取而代之, 如果每次
您建立一個矩陣 您保證建立
一個列向量 像是 (5,1) 向量
或者保證建一個行向量 那您的向量的行為
會比較容易懂 所以在這個例子
 a.shape 會是 5,1 這個的表現會很像
實際上就是一個列向量 而這是為什麼您可以將它想成
(5,1)矩陣, 就是一個列向量 這裡 a.shape 會是 1,5 而這會是表現一致的
行向量 當您需要一個向量
我會說用這個或是這個 而不要用等級1陣列 還有一件事我常常在我的
程式中如果我不完全肯定 我的向量的維度時
我通常會用判定敘述 像這樣, 來確保, 這個例子來講
這是一個 (5,1)向量 這是一個列向量 這些判定
可以不費力的執行 也可以當成是
您程式的註解文件 所以請不要遲疑的使用判定
敘述像這樣當您 覺得需要時 最後, 如果出於某種原因
您用了等級1陣列 您可以 reshape 它, a 等於 a.reshape 變成 (5,1) 陣列或者 (1,5) 陣列 讓它的行為成為比較一致的
列向量或者行向量 有時候我看到學生們
很難去追臭蟲 因為有這些非直觀的
等級1陣列影響 通過去除等級1陣列在我的
程式中, 我的程式變得更簡單 我並沒發現到這樣做
會限制我可以 在程式中做的事 我就是從不使用等級1 陣列 所以請謹記要簡化
您的程式, 不要用等級1陣列 永遠使用 n 乘 1 矩陣 基本上是列向量, 或者 1 乘
n矩陣, 或者基本上行向量 盡量用很多的
判定敘述來 仔細檢查
您矩陣跟陣列的維度 而且, 不要害羞的使用 
reshape 運算來確保您的 矩陣或陣列
是您要的維度 所以 我希望這些建議
幫助您去除可能的臭蟲 從 python 程式, 讓您更容易完成
您個程式作業