지난 강의에서 이전 비디오에서는, 산출 그래프응 이용한 예제를 통해서 
J함수를 계산하는 방법을 배웠습니다. 이제 깨끗한 전환을 통해
산출 그래프에 대해 알아보도록 하겠습니다. 그리하겨, 이 그래프를 통해
J함수의 derivative를 계산하는 방법을 알아보겠습니다. 여기 산출 그래프가 있습니다. 여러분이 J의 v에 대한 derivative를
계산하고 싶다고 해보겠습니다. 이것을 무엇일까요? 여기 v의 값을 갖고 살짝 변경한다고 하면
J의 값은 어떻게 변할까요? 여기서 J는 v의 값의 3배로 정의됩니다. 그리고 현재 v의 값은 11입니다. 만약에 v의 값을 11.001로 조금 높히면, J는 3v 이기 때문에, 현재 시점에는 그 값이 33입니다. 이 값은 그러면 33.003으로 되겠죠. 그러면 v의 값이 0.001로 늘어났습니다. 그러면 최종 결과는 J가 3배로 늘어난다는 것입니다. 그러면 J의 v에 대한derivative는 3입니다. J의 증가분은 v의 증가분의 3배이이 때문입니다. 이 예제는 이전 비디오에서 다뤘던 예제와 유사한데요, f(a)=3a 였던 예제와 말이죠. 그 이후, df/da를 약간 심플하게 만들어서 가지고 왔는데요, 대충 표현하면, df/da = 3으로 나타낼 수 있습니다. 그러므로 이렇게 J = 3v로 나타나는데요, 이 경우, dJ/dv는 3이 됩니다. 여기서는 J가 f의 역할을 하는데요, 이전 비디오 예제에서 v는 a의 역할을 학구요, 그러므로 후 방향전파의 용어에서 만약 여기 마지막 변수 결과값의 derivative를 산출하고 싶은 경우, 주로 가장 신경쓰는 변수이기도 합니다만, v에 대한 값인데요, 후 방향전파의 첫번째 단계를 진행했습니다. 이 그래프에서 one step backwards라고 합니다. 다른 예제를 하나 더 보겠습니다. dJ/da 는 무엇일까요? 다시 말해, a의 값을 올리면, 이것이 
J의 값에 어떤 영향을 미칠까요? 예제를 통해 살펴보겠습니다. 
여기서 a의 값은 5입니다. 이제 이 값을 5.001로 올려보겠습니다. 순영향은 v가 이전에는 a+u였죠, 
이 값이 11이였는데요, 이제 이 값이 11.001이 될 것입니다. 그리고 이미 위와 같이 봤습니다만, J의 값은 33.003으로 증가합니다. 그러면 여기서 볼 수 있는 것은 
0.001만큼 증가시키면 J는 0.003만큼 증가합니다. 여기서 a 증가라고 하는 것은 
여기 5라는 값에 새로운 값을 대입시키는 것입니다. 그러면 a의 변화는 그래프의 오른족으로 반영되어 J의 값이 33.003이 될 것입니다. 그러면 J의 증가가 a의 증가분과 비교하였을 때 3배가 되는 것입니다. 그러면 여기 derivative값은 3이라는 것입니다. 이것을 간단히 분해해서 설명하면
a를 변경하면 그 변경한 값이 v를 변경할 것입니다. 그렇게 v가 변경되면 
그 변화는 또 J를 변경시킬 것입니다. 그러므로 값을 증가시켰을 때의 총 J의 총 변화는, a의 값을 아주 조금 올렸을 때, a를 변경하면서, v를 증가시키게 됩니다. 그러면 v는 얼마나 늘어날까요? dv/da로 결정된 만큼 증가할 것입니다. 그리고 v의 변화량이 J를 증가시킬 것입니다. 그리하여 미적분에서는 이것을 chain rule이라고 하는데요, 
a가 v에 영향을 주면, J에 영향을 주고, 
a의 값을 약간 변경하면서 J가 변하는 양은 a를 변화시킬때 변하는 v의 양 곱하기 v값이 변할때 변하는 J의 양입니다. 다시 말씀드리면, 미적분에서는 
이것을 chain rule이라 합니다. 이번 계산을 통해 배운 것은, 
값을 0.001로 증가시키면, v도 똑같은 양 만큼 변한다는 것입니다. 그러므로 dv/da의 값은 1이 됩니다. 이전에 끝낸 값을 대입시키면, dv/dJ는 3이되고, dv/da는 1이 됩니다. 이 값의 곱셈은 3곱하기 1이구요, 그러면, 알맞은 값인 dJ//da의 값이 3이 나옵니다. 이렇게 나온 값과 같이, 
dJ/dv, 즉, 이 변수에 대한 derivative값인데요, 이 값을 통해 dJ/da도 계산을 할 수 있습니다. 또 다른 역산출의 예입니다. 표기법에 관련해 한가지 말씀드릴 것이 있는데요, 후 방향전파 도입을 위해 코드를 쓰는 경우, 여러분이 정말로 신경쓰는 결과값 변수가 있을 것입니다. 이런 결과값 변수는 여러분이 최적화 시키고 싶은 값이디고 하죠. 이런 케이스의 경우, 최종 결과값 변수는 J입니다. 여러분의 산출 그래프에서 마지막 노드에 해당하는 부분입니다. 그러므로, 수 많은 산출 그래프들이 최동 결과값 변수에 대한 derivative값을 산출하려고 할 것입니다. 즉, 다른 어떤 변수에 대한 최종 결과값 변수의 d 겠죠. 이것을 dvar라고 하겠습니다. 이렇게 최종 결과값 변수에 대한 derivative값 J와 같이 계산하는 경우가 많을 것입니다.
중간중간 변수들이 있는 경우이죠. 변수들은 a, b, c, u, 또는 v와 같을 수 있습니다. 이것을 소프트웨어에 도입시키면 
이런 변수를 뭐라고 부를까요? 한가지 할 수 있는 방법은 파이썬에서, 아주 긴 이름을 부여할 수 있습니다.
dFinalOurputVar/dvar와 같이 말이죠. 하지만 이것은 너무 긴 변수 이름이겠죠. 제 생각에는 dJdvar라고 부를 수도 있을 것 같습니다. 하지만 여려분은 dJ에 대해서 derivative값을 갖기 때문에, 즉, 여기 최종 결과값 변수에 대해서 말이죠.
그러므로 새로운 표기법을 소개하겠습니다. 코딩에서, 여기 이것을 산출할때, 그냥 dvar이라는 변수이름을 사용하겠습니다.
여기 이 양을 나타내기 위해서 말이죠. 그러므로 코드에서 쓰는 dvar는 J와 같은 최종 결과값 변수의 derivative를 나타낼 것입니다. 가끔씩은 코딩에서 여러 중간 값의 양에 대한 마지막 l을 나타낼 것입니다. 그러므로 코딩에서 여기 이 부분은
dv를 사용해서 이 값을 나타냅니다. 그러면 dv는 3이 될 것입니다. 그러면 여러분의 코드는, 여기 이것을 da로 표기하느데요, 여기서 이 값은 3이라는 것을 알아냈는데요, 저희는 이 산출 그래프를 통해
부분적으로 후 방향전파 진행했는데요, 나머지 부분은 다음 슬라이드에서 진행하겠습니다. 이제 깨끗한 버전의 산출그래프로 이동하겠습니다. 반복하자면, 이제까지는 여기서 거꾸로가서, 
dv의 값이 3이라는 것을 알아냈습니다. 그리고 dv의 정의, 이것은 그냥 변수 이름이구요, 코드가 dJ/dv입니다. da의 값이 3이라는 것을 찾았습니다. da는 역시 여러분의 코드에서 쓰이는 변수 이름인데요, 이것은, dJ/da의 값입니다. 그리고 우리는 우리가 어떻게 이렇게 두 모서리를 거꾸로 갈 수 있는지 조심해야 한다. 그럼 계속해서 derivative를 계산해보겠습니다. u의 값을 보겠습니다. dJ/du 는 무엇일까요? 이전에 계산했던 것과 비슷하게, u는6이라는 값으로 시작합니다. u의 값을 6.001로 증가시키면, v는 이전에 11이였는데요, 이 값이 11.001이 됩니다. 그럼 J는 33에서 33.003이 됩니다. 그러면 J의 증가분은 3배인데요, u에 대한 분석은 우리가 이미 실행한 
a에 대한 분석과 매우 흡사합니다. 이것은 dJ/dv 곱하기 dv/du로 계산되는데요, 이것은 이전에 계산한것과 같이 3입니다. 그리고 이것은 1이구요. 그러면 후 방향전파에서 또 한단계 진행했는데요, du는 또, 3이라는 결과를 계산합니다. 그리고 du 당연히 여기 dJ/du 입니다. 마지막 예제로 들어가겠습니다. dJ/db는 무엇일까요? 여기서 b의 값을 바꿔도 된다고 해봅시다. b를 조금 바꿔서 J의 값을 최소화 시키거나 최대화시키기 위해서 말이죠. 그러면 여기 J비용함수의 기울기는 또는 derivative는 b의 값을 조금 바꾸는 경우 
어떻게 될까요? 미적분학의 chain rule을 이용하여, 2가지 값의 곱하기로 나타낼 수 있습니다. 여기 dJ/du 곱하기 du/db로 말이죠. 그 원리는, 
b를 조금 바꾼다고하면, 즉 b를 3에서 3.001로 말이죠. J가 미치는 영향은, 먼저 U가 먼저 영향을 받을 것입니다. 그러면 u는 얼마나 영향을 받을까요? u는 b곱하기 c로 정의되는데요, 그럼 이값은 6에서 b가 3인 경우에 말이죠, 6.002로 변할 것입니다. 여기서 c의 값은 2이기 때문에 그렇습니다., 그러면 du/db는 2라는 것을 알려줍니다. 그러면 b를 0.001로 증가시키면, 
u는 그것의 2배만큼 증가합니다. 즉, du/db는 2가 됩니다. 이제 u의 값이 2배로 늘어난 것을 확인할 수 있는데요, b가 늘어난 것과 비교했을 때 말이죠, 그러면 dJ/du는 무엇일까요? 이것은 이미 3이라는 것을 알아냈었습니다. 그럼 이 값들을 곱해서 
dJ/db가 6이라는 것을 알 수 있습니다. 그리고 두번째 부분에 대한 설명입니다. u의 값이 0.002 만큼 늘어나면 J의 영향은 어떻게 되는지에 대한
설명말이죠, dJ/du가 3이라는 사실은 u가 0.002만큼 늘어나면 J의 값은 그것의 3배만큼 늘어난다는 뜻입니다. 즉, J는 0.006만큼 늘어나겠죠. 이것은 dJ/du가 3이라는 사실에 근거합니다. 수학적인 부분을 자세히 보면, d가 3.001이 된다는 것을 알게되고, 그러면 u는 6.002가 되면, 결국 v는 11.002가 됩니다. 그러면 저것은 a+u이고, 저것은 5+u가 됩니다. J는 3곱하기 v이며, 그 값은 33.006이 됩니다. 이렇게해서 dJ/db값은 6이 나오게 되는데요, 이 부분을 채우기 위해서는, 거꾸로 가는 경우 말이죠, 
이건 db이고 그 값이 6입니다. db는 쉽게 말해 dJ/db의 파이썬 변수 코드 이름입니다. 마지막 예제는 자세히 들어가진 않겠습니다. dJ를 계산하면, 여기 이 값은 dJ/du 곱하기 du가 되는데요, 그러면 여기 이 값은 9가 되고, 
이 값은 3곱하기 3입니다. 이 예제는 자세히 다루지 않겠습니다. 여기 마지막 단계를 통해, 
dc가 이렇다는 것을 알아낼 수 있습니다. 이 비디오에서 중요한 내용은, 
여기 예제에서와 같이 derivative를 계산하고, 여기 모든 derivative들을 계산할때, 
가장 효율적인 방법은 여기 빨간색 화살표와 같은 방향으로 오른쪽에서 왼쪽으로의 계산을 진행하는 것입니다. 특리 v에 대한 derivative를 먼저 계산하겠습니다. 그러면 저것이 a에 대해서 derivative를 찾는 것과
u에 대해서 derivative를 찾을 때 유용하게 쓰입니다. 그리고 여기 이 예제에서 u에 대한 derivative 여기 이 항과 여기 이 항의 같은 경우과 같이 말이죠. 이것들은 결과적으로 b에 대해서 derivative를 찾는데 
유용하게 쓰입니다. c에 대해서 derivative를 구할때도 마찬가지로 말이죠. 이제까지 산출 그래프 내용을 이야기 했는데요, 또, 최적화 시키고 싶은 J비용함수에서 계산하는 forward, left to right 계산법에 대해 알아봤습니다 그리고 derivative를 산출하기 위한 backwards, right to left 계산법도 알아봤습니다. 여러분이 만약 미적분학이나 chain rule에 대한 내용이 생소하게 들리시면, 저도 이런 내용을 빨리 진행해서 넘어갔는데요, 자세한 내용을 모르시더라도 걱정하지 마십시요. 다음 비디오에서는 로지스틱 회귀분석법에 연관지어 다시 그 내용을 알아보도록 하겠습니다. 그리하여 산출법을 도입하기 위해서 정확히 어떻게 해야하는지 로지스틱 회귀분석 모델의 derivative를 계산하기 위한 방법을 다뤄보겠습니다.