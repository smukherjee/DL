1
00:00:00,450 --> 00:00:04,786
الإمكانية التي تخولك بها
بايثون من استخدام عمليات البث

2
00:00:04,786 --> 00:00:09,944
وبصورة أعم، المرونة الكبيرة
في لغة برمجة بايثون نمباي

3
00:00:09,944 --> 00:00:14,748
هي على ما أعتقد تمثل
نقطة قوة ونقطة ضعف في لغة البرمجة.

4
00:00:14,748 --> 00:00:18,393
أعتقد أنها قوة لأنها
تخلق التعبيرية للغة.

5
00:00:18,393 --> 00:00:22,547
تتيح لك المرونة الكبيرة للغة
إنجاز الكثير من خلال سطر واحد

6
00:00:22,547 --> 00:00:24,165
من التعليمات البرمجية فقط.

7
00:00:24,165 --> 00:00:28,530
ولكن هناك نقطة ضعف أيضًا
لأنه مع البث وهذا المقدار الكبير من

8
00:00:28,530 --> 00:00:32,610
المرونة، قد تتسبب
بأخطاء غير ملحوظة أحيانًا

9
00:00:32,610 --> 00:00:36,530
أو أخطاء غير مألوفة،
إذا لم تكن على دراية بتعقيدات

10
00:00:36,530 --> 00:00:39,800
كيفية البث وكيفية
عمل ميزات مثل البث.

11
00:00:39,800 --> 00:00:44,500
علي سبيل المثال، إذا أخذت متجه عمود
 وأضفته إلى متجه صف،

12
00:00:44,500 --> 00:00:48,700
فقد تتوقع أن يرفض ذلك بسبب اختلاف الأبعاد أو خطأ في النوع
أو شيء من هذا القبيل.

13
00:00:48,700 --> 00:00:52,620
لكن قد تحصل في الواقع على مصفوفة
هي عبارة عن مجموع متجه الصف

14
00:00:52,620 --> 00:00:54,030
ومتجه العمود.

15
00:00:54,030 --> 00:00:58,370
لذلك هناك منطق داخلي 
 لهذه التأثيرات الغريبة لبايثون.

16
00:00:58,370 --> 00:01:03,370
لكن إذا لم تكن لديك دراية بلغة بايثون،
فقد رأيت بعض الطلبة يواجهون أخطاءً غريبة جدًا،

17
00:01:03,370 --> 00:01:05,680
أخطاء إيجادها بالغ الصعوبة.

18
00:01:05,680 --> 00:01:09,380
لذا ما سنفعله في هذا الفيديو هو
مشاركة بعض التلميحات

19
00:01:09,380 --> 00:01:12,800
والنصائح التي وجدتها مفيدة
لي لتجنب

20
00:01:12,800 --> 00:01:17,320
أو لتبسيط وتجنب كل الأخطاء الغريبة
في التعليمات البرمجية الخاصة بي.

21
00:01:17,320 --> 00:01:19,280
وآمل من خلال هذه
التلميحات والنصائح،

22
00:01:19,280 --> 00:01:24,193
أن تكون أنت أيضًا قادرًا على كتابة
تعليمات بايثون ونمباي البرمجية الخالية من الأخطاء.

23
00:01:25,430 --> 00:01:30,200
لتوضيح أحد أقل الآثار البديهية
من بايثون-نمباي،

24
00:01:30,200 --> 00:01:34,990
خاصة كيف نقوم بإنشاء متجهات باستخدام
بايثون-نمباي، اسمحوا لي أن أقدم عرضًا توضيحيًا سريعًا.

25
00:01:34,990 --> 00:01:40,817
دعونا نعيّن a = np.random.randn(5)‎،

26
00:01:40,817 --> 00:01:45,699
هذا ينشئ 5 متغيرات

27
00:01:45,699 --> 00:01:49,640
عشوائية غاوسية مخزنة في المصفوفات a.

28
00:01:49,640 --> 00:01:55,420
لذا دعونا نكتب print(a)‎
والآن يظهر لنا

29
00:01:55,420 --> 00:02:02,740
أن شكل a عندما نفعل ذلك
هو هذه البنية المكونة من (5,).

30
00:02:02,740 --> 00:02:06,320
وهذه تسمى مصفوفة
من الدرجة الأولى في بايثون

31
00:02:06,320 --> 00:02:09,750
وهي ليست متجه صف
وليست متجه عمود.

32
00:02:09,750 --> 00:02:12,570
وهذا يقودنا إلى بعض
الآثار غير البديهية الطفيفة.

33
00:02:12,570 --> 00:02:17,180
على سبيل المثال، إذا كتبت a منقولة (a, T)
فإنه ينتهي به الحال ليبدو مثل a.

34
00:02:17,180 --> 00:02:20,220
لذا فإن a و(a, T)
ينتهي بهما الحال ليكونا متماثلين.

35
00:02:20,220 --> 00:02:25,800
وإذا طبعت الناتج الداخلي
بين a و(a, T)، فقد تعتقد أن

36
00:02:25,800 --> 00:02:30,190
a مضروبة في (a, T)، قد تكون الناتج الخارجي،
وينبغي أن تعطيك مصفوفة ربما.

37
00:02:30,190 --> 00:02:34,170
ولكن إن فعلت ذلك
فستحصل بدلاً من ذلك على رقم.

38
00:02:34,170 --> 00:02:39,612
لذا ما سأنصح به هو أنه
عندما تقوم ببرمجة شبكات جديدة،

39
00:02:39,612 --> 00:02:46,115
فلا تستخدم بنى البيانات
التي لها شكل 5، أو n، لمجموعة من الدرجة الأولى.

40
00:02:46,115 --> 00:02:52,134
بدلاً من ذلك، إذا قمت بتعيين a لتكون هكذا (5,1)

41
00:02:52,134 --> 00:02:58,764
هذا يلزم a أن
تكون متجه عمود (5,1).

42
00:02:58,764 --> 00:03:02,399
وحيث بدا في السابق أن a و(a, T)
متماثلان،

43
00:03:02,399 --> 00:03:06,590
الآن تصبح (a, T)،
الآن (a, T) هي a متجه صف.

44
00:03:06,590 --> 00:03:08,437
لاحظ الاختلاف الدقيق.

45
00:03:08,437 --> 00:03:12,213
في بنية البيانات هذه هناك قوسان مربعان
عندما نطبع (a, T).

46
00:03:12,213 --> 00:03:14,460
حيث كان هناك
قوس مربع واحد سابقًا.

47
00:03:14,460 --> 00:03:19,393
إذًا هذا هو الفرق بينهما،
هذه حقيقة مصفوفة 1 في 5

48
00:03:19,393 --> 00:03:23,481
مقابل تلك المصفوفات
من الدرجة الأولى.

49
00:03:23,481 --> 00:03:28,129
وإذا طبعت، لنقل،
الناتج بين a و(a, T)،

50
00:03:28,129 --> 00:03:32,444
هذا سوف يعطيك
الناتج الخارجي للمتجه، صحيح؟

51
00:03:32,444 --> 00:03:35,795
وهكذا، الناتج الخارجي للمتجه
يعطيك مصفوفة.

52
00:03:35,795 --> 00:03:40,305
لذا، دعونا ننظر بمزيد من التفصيل
فيما رأيناه للتو

53
00:03:40,305 --> 00:03:43,185
الأمر الأول الذي قمنا بتشغيله
قبل قليل كان هذا.

54
00:03:43,185 --> 00:03:47,839
وأدى هذا إلى إنشاء بنية بيانات مع

55
00:03:47,839 --> 00:03:52,930
a.shape كان هذا الشيء المضحك (,5) لذا

56
00:03:52,930 --> 00:03:57,270
هذا يدعى مصفوفة من الدرجة الأولى.

57
00:03:57,270 --> 00:03:58,960
وهي بنية بيانات مضحكة.

58
00:03:58,960 --> 00:04:04,000
هي لا تتصرف بانتظام كمتجه صف
ولا كمتجه عمود،

59
00:04:04,000 --> 00:04:06,750
مما يجعل بعض آثارها
غير بديهية.

60
00:04:06,750 --> 00:04:10,770
لذا ما سأنصح به هو التالي
عندما تحل تمارين

61
00:04:10,770 --> 00:04:14,050
البرمجة الخاصة، أو في الحقيقة عندما تطبق الانحدار اللوجيستي

62
00:04:14,050 --> 00:04:19,740
أو الشبكات العصبية، عليك فقط
ألا تستخدم هذه المتسلسلات ذات الدرجة الأولى.

63
00:04:21,020 --> 00:04:24,098
بدلاً من ذلك، في كل
مرة تنشئ بها مصفوفة

64
00:04:24,098 --> 00:04:27,500
التزم بجعلها إما
متجه عمود،

65
00:04:27,500 --> 00:04:32,360
هذا ينشئ متجه (5,1)
أو التزم بجعلها متجه صف،

66
00:04:32,360 --> 00:04:36,670
عندها سيكون سلوك متجهاتك
أسهل للفهم ربما

67
00:04:36,670 --> 00:04:43,115
لذا في هذه الحالة،
a.shape ستكون متساوية لـ 5,1.

68
00:04:43,115 --> 00:04:48,510
وهو يتصرف كثيرا مثل، لكنه
في الحقيقة، هو متجه عمود.

69
00:04:48,510 --> 00:04:53,233
وهذا يفسر لماذا بإمكانك التفكير فيه كأنه
مصفوفة (5,1) حيث إنها متجه عمود.

70
00:04:53,233 --> 00:04:56,880
وهنا a.shape سيكون 1,5،

71
00:04:56,880 --> 00:05:01,000
وهذا يتصرف بانتظام
كمتجه صف.

72
00:05:02,150 --> 00:05:06,258
لذا عندما تحتاج متجهًا، فاستخدم
إما هذا أو ذاك، و لكن

73
00:05:06,258 --> 00:05:07,538
لا تستخدم مصفوفة من الدرجة الأولى.

74
00:05:07,538 --> 00:05:12,061
أمر إضافي آخر أفعله كثيرًا في تعليماتي البرمجية هو
إذا لم أكن متأكدًا تمامًا ما

75
00:05:12,061 --> 00:05:17,029
أبعاد أحد متجهاتي،
عادة سأضعها في جملة تأكيد

76
00:05:17,029 --> 00:05:21,720
هكذا، لأتحقق، في هذه الحالة،
أن هذا متجه (5,1).

77
00:05:21,720 --> 00:05:23,730
إذًا هذا متجه عمود.

78
00:05:23,730 --> 00:05:26,900
يتم تعيين هذه التأكيدات
إلى تنفيذ

79
00:05:26,900 --> 00:05:30,250
بالإضافة إلى أنها تخدم كتوثيق
لتعليماتك البرمجية.

80
00:05:30,250 --> 00:05:34,160
لذا لا تتردد بوضع جمل تأكيدية
مثل هذه حالما شعرت أنك

81
00:05:34,160 --> 00:05:35,320
ترغب بذلك.

82
00:05:35,320 --> 00:05:39,510
وأخيرًا، إذا واجهتك، لأي سبب من الأسباب
مصفوفة من الدرجة الأولى،

83
00:05:39,510 --> 00:05:43,960
بإمكانك تغير شكلها هكذا a تساوي a.reshape

84
00:05:43,960 --> 00:05:48,900
إلى، دعنا نقل مصفوفة (5,1) أو مصفوفة (1,5)

85
00:05:48,900 --> 00:05:53,750
لذا ستتصرف بانتظام أكبر
كمتجه عمود أو متجه صف.

86
00:05:53,750 --> 00:05:57,626
لذا في بعض الأحيان رأيت طلابًا
ينتهون إلى مشكلة صعبة التتبع

87
00:05:57,626 --> 00:06:01,119
بسبب هذه الآثار غير البديهية
للمصفوفات من الدرجة الأولى.

88
00:06:01,119 --> 00:06:06,246
باستبعاد المصفوفات من الدرجة الأولى من تعليماتي البرمجية القديمة،
أعتقد أن تعليماتي البرمجية أصبحت أبسط.

89
00:06:06,246 --> 00:06:09,463
وحقيقة لم أجدها مقيدة
من حيث الأمور التي بإمكاني

90
00:06:09,463 --> 00:06:10,335
التعبير عنها بالتعليمات البرمجية.

91
00:06:10,335 --> 00:06:12,469
لم أستخدم مصفوفة من الدرجة الأولى مطلقًا.

92
00:06:12,469 --> 00:06:17,090
لذا النقاط الأساسية لتبسيط التعليمات البرمجية
لا تستخدم متسلسلات ذات الدرجة الأولى.

93
00:06:17,090 --> 00:06:19,437
دائمًا استخدم إما مصفوفات n في 1،

94
00:06:19,437 --> 00:06:24,510
أساسًا متجهات عمود، أو مصفوفات 1 في n
أو أساسًا متجهات صف.

95
00:06:24,510 --> 00:06:26,599
أطلق العنان لنفسك لوضع
الكثير من عبارات التأكيد

96
00:06:26,599 --> 00:06:29,590
لذا تحقق مرة أخرى من
أبعاد مصفوفاتك ومتسلسلاتك.

97
00:06:29,590 --> 00:06:34,480
ولا تكن خجولاً في استدعاء عملية
تغيير الشكل للتأكد

98
00:06:34,480 --> 00:06:38,780
أن مصفوفاتك أو متجهاتك
بالأبعاد التي ينبغي أن تكون عليها

99
00:06:38,780 --> 00:06:39,420
لذا،

100
00:06:39,420 --> 00:06:44,770
آمل أن هذه المجموعة من المقترحات
ستساعدك في استبعاد سبب للأخطاء

101
00:06:44,770 --> 00:06:48,840
من تعليمات بايثون البرمجية، وجعل
إكمال تمارين حل المشاكل أسهل لك.