1
00:00:00,450 --> 00:00:04,786
Python'un broadcasting işlemleri yeteneği

2
00:00:04,786 --> 00:00:09,944
daha genel anlamda, python numpy program
dilinin büyük esnekliği

3
00:00:09,944 --> 00:00:14,748
bence hem dile güç katıyor aynı zamanda zaafı oluyor.

4
00:00:14,748 --> 00:00:18,393
Güç veren bir özellik bence, dilin anlaşılmasını kolaylaştırır

5
00:00:18,393 --> 00:00:22,547
Dilin bu esnekliği
daha fazla şeyi bir satır kod ile

6
00:00:22,547 --> 00:00:24,165
yazmanıza izin verir.

7
00:00:24,165 --> 00:00:28,530
Ancak, bazen zaaf olarak da düşünülebilir
çünkü eğer broadcasting'in

8
00:00:28,530 --> 00:00:32,610
ve broadcasting'e benzer özelliklerin nasıl çalıştığına aşina değilseniz

9
00:00:32,610 --> 00:00:36,530
broadcasting ve onun çok fazla esnekliği sayesinde

10
00:00:36,530 --> 00:00:39,800
bazen hemen göze çarpmayan ya da çok garip gözüken hatalar oluşturabilirsiniz.

11
00:00:39,800 --> 00:00:44,500
Örneğin, bir sütun vektör alıp bir satır vector 
ögesine eklemek istiyorsanız

12
00:00:44,500 --> 00:00:48,700
boyut uyuşmazlığı veya tur 
hatası gelmesini düşünebilirsiniz.

13
00:00:48,700 --> 00:00:52,620
ama size bir matris verebilir, satir vektörü ve

14
00:00:52,620 --> 00:00:54,030
sütun vektörünün toplamından oluşan.

15
00:00:54,030 --> 00:00:58,370
Aslanda Python dilinin bu gariplikleri 
yapma sinin arkasında bir mantık var.

16
00:00:58,370 --> 00:01:03,370
Ama Python ile aşina değilseniz, 
ben bazı öğrencilerin çok garip

17
00:01:03,370 --> 00:01:05,680
yazılım hatalarıyla karşılaştığını gördüm.

18
00:01:05,680 --> 00:01:09,380
Bu videoda, yazdığım kodlardaki tuhaf<br /> görünen bazı hataların üstesinden gelmeme

19
00:01:09,380 --> 00:01:12,800
ve bazen de problemi çözerken <br /> kodumu da basitleştirmeme

20
00:01:12,800 --> 00:01:17,320
yardımcı olan bazı ipuçlarını ve püf <br />noktaları sizlerle paylaşmak istiyorum.

21
00:01:17,320 --> 00:01:19,280
Umarım sizler de bu ipuçlarını <br /> ve püf noktaları kullanarak rahatlıkla

22
00:01:19,280 --> 00:01:24,193
hatalardan arındırılmış Python veya
Numpy kodu yazabileceksiniz.

23
00:01:25,430 --> 00:01:30,200
Python-Numpy'ın özellikle vektör oluşturmak <br /> gibi deneyime / sezgiye daha az dayalı işlemlerinin

24
00:01:30,200 --> 00:01:34,990
etkisini gözlemlemek için hızlıca bir örnek vermeme izin verin.

25
00:01:34,990 --> 00:01:40,817
a = np.random.randn(5) diyelim

26
00:01:40,817 --> 00:01:45,699
Böylece içinde 5 Gaussian değişkeni olan

27
00:01:45,699 --> 00:01:49,640
bir a dizisi oluşturmuş olduk.

28
00:01:49,640 --> 00:01:55,420
a dizisinin içeriğini görmek için print(a) yazalım.

29
00:01:55,420 --> 00:02:02,740
Bunu yaptığınızda a'nın şeklinin (5,) <br />şeklinde tanımlandığını görüyoruz.

30
00:02:02,740 --> 00:02:06,320
Bu dizi Python'da 1. dereceden <br />bir dizi olarak adlandırılır 

31
00:02:06,320 --> 00:02:09,750
ve ne sütun vektörü<br /> ne de satır vektörüdür.

32
00:02:09,750 --> 00:02:12,570
Bu durum bazı beklenmeyen sonuçlara yol açabilir.

33
00:02:12,570 --> 00:02:17,180
Örneğin, a'nın devriğini(transpoz) yazdırmak, <br />a'yı yazdırmak ile aynı olur.

34
00:02:17,180 --> 00:02:20,220
Sonuç olarak a ve a.T birbirinin aynısıdır.

35
00:02:20,220 --> 00:02:25,800
Eğer a ve a'nın devriğinin <br />skaler çarpımını hesaplayacak olursak

36
00:02:25,800 --> 00:02:30,190
a ve a.T'nın çarpımı matriks çarpımı olabilir, belki de <br />sonucumuz bir matriks olabilir diye düşünebilirsiniz.

37
00:02:30,190 --> 00:02:34,170
Fakat bu işlemi yaparsanız, <br />tek bir sayıdan ibaret olduğunu görürsünüz.

38
00:02:34,170 --> 00:02:39,612
Nöral ağlar oluşturuyorsanız size önerim,

39
00:02:39,612 --> 00:02:46,115
yapısı (5,) veya (n,) veya 1. dereceden dizi<br /> olmayan veri yapıları kullanmanız.

40
00:02:46,115 --> 00:02:52,134
Onların yerine, a'yı bu şekilde tanımlarsanız

41
00:02:52,134 --> 00:02:58,764
bu tanım, a'yı (5,1) boyutunda bir sütun vektörü yapar.

42
00:02:58,764 --> 00:03:02,399
Az önce a'ya eşit görünen a.T'yi şimdi hesaplarsak

43
00:03:02,399 --> 00:03:06,590
a.T'nin şimdi bir sıra vektörü olduğunu gözlemleriz.

44
00:03:06,590 --> 00:03:08,437
Aralarındaki şu ince farka dikkat edin

45
00:03:08,437 --> 00:03:12,213
Şu an kullandığımız yapıda a.T'yi <br />hesapladığımızda iki köşeli parantez görüyoruz,

46
00:03:12,213 --> 00:03:14,460
fakat az önce tek bir köşeli parantez görüyorduk.

47
00:03:14,460 --> 00:03:19,393
(5,1) boyutunda bir matriks ile

48
00:03:19,393 --> 00:03:23,481
1. dereceden dizi arasındaki fark bu.

49
00:03:23,481 --> 00:03:28,129
Ve şimdi a ve a.T çarpımını hesaplarsak

50
00:03:28,129 --> 00:03:32,444
bu bize bir vektörün dış çarpımını verecektir, değil mi?

51
00:03:32,444 --> 00:03:35,795
Ve bir vektörün dış çarpımı <br />bize bir matriks verecektir.

52
00:03:35,795 --> 00:03:40,305
Şimdi, burada gördüklerimizi <br />daha detaylı bir şekilde inceleyelim

53
00:03:40,305 --> 00:03:43,185
Henüz az önce yazdığımız ilk komut buydu.

54
00:03:43,185 --> 00:03:47,839
Bu bize yapısı şaşırtıcı bir şekilde (5,) olan

55
00:03:47,839 --> 00:03:52,930
bir veri yapısı oluşturdu.

56
00:03:52,930 --> 00:03:57,270
Bu, 1. dereceden bir dizi olarak adlandırılır.

57
00:03:57,270 --> 00:03:58,960
Bu çok komik bir veri yapısı çünkü

58
00:03:58,960 --> 00:04:04,000
bir sütun vektörü olarak veya <br />bir satır vektörü olarak davranmıyor.

59
00:04:04,000 --> 00:04:06,750
Bu durumda, bu yapının sebep olduğu bazı etkiler<br /> deneysellikten uzaklaşıyor.

60
00:04:06,750 --> 00:04:10,770
Benim önerim, programlama egzersizlerinizi çözerken,

61
00:04:10,770 --> 00:04:14,050
hatta lojistik regresyon uygularken veya nöral ağlar oluştururken

62
00:04:14,050 --> 00:04:19,740
bu 1. dereceden dizileri kullanmamanız.

63
00:04:21,020 --> 00:04:24,098
Bunun yerine, bir dizi oluşturduğunuzda

64
00:04:24,098 --> 00:04:27,500
bu diziyi sütun vektörü, bu durumda (5,1)lik bir vektör,

65
00:04:27,500 --> 00:04:32,360
veya bir sıra vektörü olarak oluşturursanız,

66
00:04:32,360 --> 00:04:36,670
vektörlerinizin nasıl davranacağını<br /> daha iyi anlayabilirsiniz.

67
00:04:36,670 --> 00:04:43,115
Burada, a (5,1) boyutunda

68
00:04:43,115 --> 00:04:48,510
bir sütun vektörü, ve o şekilde davranacaktır.

69
00:04:48,510 --> 00:04:53,233
Bu sayede a'yı (5,1)lik bir matriks olarak,<br /> bir sütun vektörü olarak düşünebiliriz.

70
00:04:53,233 --> 00:04:56,880
Burada ise a, (1,5) boyutunda bir

71
00:04:56,880 --> 00:05:01,000
sıra vektörü ve tam olarak bir <br />sıra vektörü olarak davranacaktır.

72
00:05:02,150 --> 00:05:06,258
Sonuç olarak, bir vektöre ihtiyacınız olduğunda,<br />bunu veya bunu kullanmanızı öneririm.

73
00:05:06,258 --> 00:05:07,538
1. dereceden bir dizi kullanmanızı değil.

74
00:05:07,538 --> 00:05:12,061
Sık sık kullandığım başka bir yöntem ise,

75
00:05:12,061 --> 00:05:17,029
vektörlerimden birinin boyutlarından emin olmadığımda<br /> örneğin bunun (5,1) olduğundan emin olmak için

76
00:05:17,029 --> 00:05:21,720
buradaki gibi bir assert fonksiyonu çağırmak.

77
00:05:21,720 --> 00:05:23,730
Yani bu bir sütun vektörü.

78
00:05:23,730 --> 00:05:26,900
Bu assert fonksiyonları gerçekten<br /> düşük maliyetli olmalarının yanı sıra

79
00:05:26,900 --> 00:05:30,250
kodunuzun daha anlaşılır olmasına yardımcı olurlar.

80
00:05:30,250 --> 00:05:34,160
Bu yüzden istediğiniz zamanlarda

81
00:05:34,160 --> 00:05:35,320
yazmaktan çekinmeyin.

82
00:05:35,320 --> 00:05:39,510
Ve son olarak, herhangi bir sebepten dolayı <br />1. dereceden bir dizi elde ederseniz

83
00:05:39,510 --> 00:05:43,960
bu diziyi a eşittir a.reshape diyerek

84
00:05:43,960 --> 00:05:48,900
(5,1) veya (1,5) boyutunda bir diziye çevirebilirsiniz.

85
00:05:48,900 --> 00:05:53,750
Böylece satır veya sütun vektörü olarak <br />daha düzgün davranmasını sağlarsınız.

86
00:05:53,750 --> 00:05:57,626
Bazen öğrencilerin hataları bulmakta <br />çok zorlandıklarını görüyorum,

87
00:05:57,626 --> 00:06:01,119
bunun sebebi 1. dereceden dizilerin<br /> beklenmeyen sonuçlara yol açabilmesi.

88
00:06:01,119 --> 00:06:06,246
Bence 1. dereceden diziler <br />kullanmayarak kodumu basitleştiriyorum.

89
00:06:06,246 --> 00:06:09,463
Ve bu dizileri kullanmamanın yazdığım kodu

90
00:06:09,463 --> 00:06:10,335
sınırlanmadığını gördüm.

91
00:06:10,335 --> 00:06:12,469
Ben hiç 1. dereceden dizi kullanmadım.

92
00:06:12,469 --> 00:06:17,090
Kodu basitleştirmek için 1. dereceden dizi kullanmayın.

93
00:06:17,090 --> 00:06:19,437
Her zaman ya nx1 matris

94
00:06:19,437 --> 00:06:24,510
yani sütun vektörü, ya da <br />1xn matris yani satır vektörü kullanın.

95
00:06:24,510 --> 00:06:26,599
Bir çok assertion fonksiyonu kullanmaktan çekinmeyin,

96
00:06:26,599 --> 00:06:29,590
bunları kullanarak matris ve dizilerinizin<br /> boyutlarını tekrar tekrar kontrol edin.

97
00:06:29,590 --> 00:06:34,480
Ek olarak, kullandığınız yapıların boyutlarından emin olmak için

98
00:06:34,480 --> 00:06:38,780
reshape fonksiyonunu kullanmaktan çekinmeyin

99
00:06:38,780 --> 00:06:39,420
Bir marka 

100
00:06:39,420 --> 00:06:44,770
Umarım bu videodaki öneriler kodunuzdaki hataları

101
00:06:44,770 --> 00:06:48,840
çözmenize yardımcı olur ve çözdüğünüz <br />egzersizleri sizin için kolaylaştırır.