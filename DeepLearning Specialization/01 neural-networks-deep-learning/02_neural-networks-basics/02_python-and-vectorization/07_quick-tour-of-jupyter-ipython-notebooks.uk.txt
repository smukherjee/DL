З пройденим матеріалом ти вже практично готовий/а вирішити своє перше програмувальне завдання. Перед тим як це зробити, 
дозволь коротенько розказати про iPython записники в Coursera. Ось Jupiter/iPython записник, в який можна зайти на Coursera. Давай я швиденько покажу кілька його особливостей. Інструкції вказані просто тут - в iPython записнику. Оцей довгий світло-сірий блок - блок коду. Тож, іноді, ти бачитимеш в цих блоках щось подібне на це: ### START CODE HERE ###, ### END CODE HERE ###. Щоб виконати програмувальну вправу, тобі потрібно писати код
 між "### START CODE HERE ###" і "### END CODE HERE ###". Наприклад, "print(Hello world)" А потім, щоб виконати код в блоці, ти можеш натиснути "Shift+Enter" і, 
таким чином, виконати цей код в блоці, в якому ми просто написали print("Hello world"). Тож ця команда виведе "Hello world". Щоб запустити комірку на виконання (можна запустити на виконання один з блоків), клацни на Cell, потім на Run Cell. І цей код буде виконано. Можливо на твоєму комп'ютері комбінація клавіш для Cell/ Run Cell відрізняється від Shift+Enter. Проте і для Mac, і для PC це - Shift+Enter. Тож, скоріш за все, у тебе також. Тепер, читаючи інструкції, якщо ти випадково натиснув/ла на них, то побачиш мову простої розмітки. Якщо ти потрапив в цей дивний текст, то, щоб перетворити його назад в звичайний, 
просто запусти комірку на виконання. Тож клацаєш по Cell/Run Cell або натискаєш Shift+Enter і ця дія виконає код простої розмітки і 
перетворить його назад в звичайний. І ще кілька підказок. Коли виконується ось такий код, він виконується на ядрі [kernel] - на шматку коду, який виконується на сервері. Якщо ти запустиш на виконання надмірно велике завдання, або залишиш комп'ютер на тривалий час, або щось піде не так (інтернет-зв'язок чи щось таке), то є незначний шанс, що ядро впаде. В такому випадку, клацни Kernel, а потім Restart ядра. Вірогідно це перезапустить ядро і змусить його знову працювати. Це не повинно трапитись, якщо ти запускаєш відносно невеликі завдання або просто запускаєш iPython записник. Якщо бачиш повідомлення про помилку, що ядро впало чи щось подібне, то можеш спробувати перезапустити ядро. І, нарешті, в iPython записнику (як тут) може бути багато блоків коду. Тож, навіть якщо попередній блок нічого не створював, запусти це блок на виконання, бо (в цьому випадку) він імпортує NumPy як np і т.п. І оголошує деякі змінні, які можуть знадобитись для запуску блоків з кодом, що розташовані нижче. Тож, запускай верхні блоки, 
навіть якщо не було завдання дописувати в них код. І, нарешті, коли знайдеш розв'язки, тут є блакитна кнопка "Відправити завдання" 
[Submit Assignment] вгорі справа. Натискай її, щоб відправити свої розв'язки для оцінки. Я помітив, що інтерактивна природа командної строки в iPython записнику - дуже корисна і її дуже легко вивчити. Навіть для кількох рядків коду можна побачити результат, дослідити їх і відредагувати дуже швидко. Тож я надіюсь, що стосовно вправ на Coursera, Jupiter iPython допоможе тобі швидко вчитись, експериментувати і бачити як реалізуються алгоритми. Є ще одне відео після цього. Це необов'язкове відео. В ньому розповідається про функцію Витрат для логістичної регресії. 
Можеш його як дивитись, так і не дивитись. Будь-який вибір - підходить. Щоб ти не обрав/ла, хай щастить з програмувальним завданням! І також я з нетерпінням чекаю тебе на початку 3-ого тижня.