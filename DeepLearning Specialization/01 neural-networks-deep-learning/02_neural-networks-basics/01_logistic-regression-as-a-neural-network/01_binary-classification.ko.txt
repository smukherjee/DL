안녕하세요. 다시 오신 것을 환영합니다. 이번 주에는 신경망 프로그래밍의 기초에 대해 알아보도록 하겠습니다. 신경망을 구현할 때에는 매우 중요한 몇 가지 기술이 있습니다. 예를 들어, m개의 학습 표본을 가진 학습 세트가 있으면, m개의 학습 표본에 대해서 for문을 돌리면서 하나씩 학습 세트를 처리 해 왔을 것입니다. 하지만 신경망을 구현할 때는 전체 학습 세트를 돌리는데 for문을 사용하지 않고 처리하고자 합니다. 따라서, 이를 어떻게 하는지 강의를 통해 알아보도록 합시다. 또다른 아이디어에는, 신경망으로 계산을 할 때 보통 순방향경로 혹은 순전파, 그 다음엔 역방향경로 혹은 역전파 계산법을 사용합니다. 따라서, 이번 주 강의에서 신경망을 학습시킬 때 왜 순전파와 역전파를 이용하여 계산을 하는지 소개하도록 하겠습니다. 이 강의에서 저는 이해를 돕고자 로지스틱 회귀를 통해 아이디어를 전달하려 합니다. 하지만 예전에 로지스틱 회귀에 대해서 들어보셨을지라도, 이 강의에서 얻을 수 있는 새롭고 흥미로운 아이디어가 있을 것이라 생각합니다. 그럼 시작해보도록 합시다. 로지스틱 회귀는 이진 분류를 위한 알고리즘입니다. 문제를 통해 이야기해 보도록 합시다. 여기 예로 이진 분류 문제가 하나 있습니다. 여기와 같이 입력 이미지가 있습니다. 이미지를 인식하기 위해서 고양이일 때에는 1로, 고양이가 아닐 때는 0으로 레이블을 출력하려 합니다. 그리고 출력 레이블을 나타내기 위해 y를 사용하도록 하겠습니다. 이미지는 컴퓨터에서 어떻게 표현되는지 살펴보도록 하겠습니다. 이미지를 저장하기 위해서 컴퓨터는 각각 빨간색, 녹색, 파란색 채널에 대응하는 세 개로 분리된 행렬을 사용합니다. 그래서 입력 이미지가 64x64 픽셀이라면 빨간색, 녹색, 파란색 픽셀의 채도에 해당하는 값을 가진 3개의 64x64 행렬을 있을 것입니다. 좁은 슬라이드에 표현하다 보니깐 최대한 작게 그렸는데, 여기에는 64x64 대신에 5x4 행렬이 사용 되었습니다. 이 픽셀들의 채도값을 특징벡터로 바꾸기 위해 여기 픽셀값 모두를 하나의 입력 특징벡터 x에 펼쳐 보았습니다. 모든 픽셀 채도값을 특징벡터에 나열하기 위해서 이미지에 해당하는 특징벡터를 다음과 같이 정의해 봅시다. 255, 231, ... 255, 231, ... 이런식으로 빨간색 픽셀값 모두를 나열합시다. 다음엔 255, 134, ... 255, 134, ... 여기 이미지에 있는 빨간색, 녹색, 파란색 픽셀 채도를 모두 여기 기다란 특징벡터에 나열해봅시다. 그래서 이미지가 64x64 이미지라면, 이 특징벡터 x의 전체 차원은 64x64x3이 될 것입니다. 이는 여기 세 개의 행렬 안에 있는 모든 값들의 수이기 때문입니다. 이 경우에는 12,288이 되겠고 여기 모든 숫자를 곱하면 얻을 수가 있습니다. 그래서 입력 특징 x의 차원을 nx = 12,288로 표현하겠습니다. 가끔 간결하게, 입력 특징벡터의 차원을 소문자 n으로 쓰겠습니다. 따라서 이진 분류에서, 우리의 목표는 입력 벡터 x로 표현된 이미지를 입력으로 주어 분류자를 학습시키고, 출력 레이블 y가 1인지 0인지 예측하려 합니다. 즉, 고양이인지 고양이가 아닌지 예측합니다. 앞으로 이 강의에서 사용하게 될 몇 가지 표기법을 정리하도록 하겠습니다. 하나의 학습 표본은 순서쌍 (x,y)로 표기됩니다. 여기서 x는 x차원을 가진 특징벡터이고, y는 0 혹은 1중에 하나의 값을 가지는 레이블입니다. 학습 세트는 m개의 학습 표본으로 구성되어 있습니다. 그리고 학습 세트는 첫번째 학습 표본의 입력값과 출력값 (x(1),y(1)), 두번째 학습 표본 (x(2),y(2))에서 마지막 학습 표본 (x(m), y(m))으로 적을 수가 있습니다. 그래서 이것들이 모두 합쳐진 것이 전체 학습 세트입니다. 학습 표본의 수를 나타내기 위해 소문자 m을 사용하도록 하겠습니다. 그리고 가끔 학습 표본의 수라는 것을 강조하기 위해 이것을 m=m_train으로 적도록 하겠습니다. 그리고 테스트 세트를 말할 때는, m_test로 테스트 표본의 수를 나타내겠습니다. 그래서 이것은 테스트 표본의 수입니다. 마지막으로 모든 학습 표본을 더욱 간결하게 표현하기 위해서 대문자 X로 행렬을 정의하겠습니다. 이 행렬은 학습 세트 입력값들 x(1), x(2), ... 을 가져와서 세로줄로 입력값들을 쌓은 것입니다. 그래서 x(1)을 가져와서 여기 행렬의 첫번째 열에 놓고 x(2)는 두번째 열, 이런식으로 x(m)까지 놓겠습니다. 그러면서 행렬 X가 만들어지겠습니다. 따라서 이 행렬은 학습 표본의 수인 m개의 세로줄 행렬의 높이인 nx개의 가로줄을 가지게 됩니다. 주의할 것이 있는데, 다른 강의에서 가로줄로 학습 표본을 쌓아서 행렬 X를 표현하는 것을 보셨을 겁니다. x(1) 전치시키고, 아래로 가서 x(m)까지 전치시키고 이런식으로요. 하지만 신경망을 구현할 때 왼쪽에 제가 쓴 표기법이 훨씬 더 쉽다는 것이 알려졌습니다. 그래서 요약하면, X는 nx x m차원을 가진 행렬이고, 파이썬을 코딩할 때 나오는 X.shape()는 행렬의 형태를 알기 위한 명령어이고 (nx, m)을 출력합니다. 따라서 그것은 단순히 nx x m차원의 행렬을 의미합니다. 여기까지 학습 표본의 입력 x를 어떻게 행렬에 묶는지 알아보았습니다. 그렇다면 출력 레이블 Y는 어떻게 할까요? 신경망을 좀 더 쉽게 구현할려면 출력 레이블 Y도 세로줄로 해서 쌓는 것이 더 편리합니다. 따라서 대분자 Y를 이런식으로 y(1), y(2), ... y(m)와 같아지도록 정의하겠습니다. 그러면 여기 있는 Y는 1 x m 다이멘션얼 매트릭스가 되겠죠. 그리고 다시 Y 모양없이 표기하면, Y는 1, m이 되겠죠. 즉, 이것은 1 x m 매트릭스가 됩니다. 여러분이 차차 새로운 네트워크, mtrain discourse에 영향을 주면서, 다른 트레이닝 example과 연관된 데이터를 적용시키는 것이 
유용하다고 느끼실 것입니다. 여기서 데이터는 x 또는 y또는 나중에 다룰 데이터의 양입니다. 다른 트레이닝 example과 연관된 데이터를 적용시켜서 마찬가지로 x와 y에서 했던 것처럼 다른 줄에 쌓는 방식으로 
진행합니다. 이것은 회귀를 가르키는데 쓰는 표기방식이구요, 다름 코스에서 다룰 신경망에 대한 표기법입니다. 여러분이 만약 표기문자가 뜻하는 것을 까먹는 경우,
예를 들어, M이 무엇인지 N이 무엇인지, 다른 어떤 표기 방법은 또 무엇인지, 
이런 내용을 코스 웹사이트 notation guide로 포스팅했기 때문에 여러분이 빠르게 궁금해하는
표기를 확인할 수 있습니다. 자 그럼, 다음 비디오로 넘어가겠습니다. 다음 비디오에서는 이 표기를 사용하여 
선형회귀를 도출하는 법을 다루겠습니다.