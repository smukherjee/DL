पिछले वीडिओ में, मैनें बताया कि ब्राडकास्टिंग एक और तकनीक है जिसे आप उपयोग कर सकते है
 अपना पाइथन कोड तेज़ी से चलाने के लिए. इस वीडियो में, चलो गहराई में जाते है कि
 कैसे पाइथन में ब्राडकास्टिंग असल में काम करती है. चलो प्रोत्साहित करते हैं ब्राडकास्टिंग को एक उदाहरण के साथ. इस मैट्रिक्स में, मैंने दिखाया है संख्या कैलोरीज़ की कार्बोहाइड्रेट्स से, प्रोटींस और वसा चार भिन्न खाद्य पदार्थों के 100 ग्राम में. तो उदाहरण के लिए, सेब का एक 100 ग्राम पता चलता है, रखता है 56 कैलोरीज़ कार्ब्स से और बहुत कम प्रोटींस और वसा से. जबकि, इसके विपरीत, एक 100 ग्राम बीफ़ रखता है 
104 कैलोरीज प्रोटीन से और 135 कैलोरीज वसा से. अब, चलो कहते है कि आपका लक्ष्य है गणना करना 
कैलोरीज़ के प्रतिशत की कार्ब्स, प्रोटींस और वसा से चार खाद्य पदार्थों में से प्रत्येक के लिए. तो, उदहारण के लिए, यदि आप इस कॉलम को देखें और उस कॉलम में संख्याओं को जोड़ें, 
आप पातें हैं कि सेब का 100 ग्राम रखता है 56 प्लस 1.2 प्लस 1.8 ताकि यह 59 कैलोरीज है. और इसलिए एक प्रतिशत के रूप में, प्रतिशत कैलोरीज कार्बोहाइड्रेट्स से एक सेब में होगा 56 विभाजित 59 के, यह है लगभग 94.9%. इसलिए अधिकतर कैलोरीज सेब में आती हैं कार्ब्स से,
 जबकि इसके विपरीत, अधिकतर कैलोरीज बीफ की आती हैं प्रोटीन और वसा से और
 ऐसों से. इसलिए जो गणना आप चाहते हो असल में है 
जोड़ना प्रत्येक को चार कॉलमोंं में से इस मैट्रिक्स के पाने के लिए कुल संख्या
 कैलोरीज़ की 100 ग्राम में सेब के, माँस, अंडे और आलुओं के. और फिर विभाजित करना मैट्रिक्स भर में, ताकि प्राप्त करें प्रतिशत 
 कैलोरीज का कार्ब्स से, प्रोटीन्स और वसा चार खाद्य पदार्थो में से प्रत्येक के लिए. तो सवाल यह है कि, क्या आप कर सकते हो
 यह बिना एक सीधे सीधे फॉर लूप के? चलों देखतें हैं कि आप कैसें कर सकतें थे वह. जो मैं करने जा रहा हूँ है आपको दिखाना कि
 कैसे आप सेट कर सकते हो, यह मैट्रिक्स बराबर तीन बाय चार मैट्रिक्स A के. और फिर एक लाइन को पाइथन कोड के साथ
हम जोड़ने जा रहे हैं कालमों को नीचे तक. तो हमें मिलने वाली हैं चार संख्याएं कुल संख्या के लिए कैलोरीज़ की इन चार अलग अलग प्रकार के खाद्य पदार्थों में, 100 ग्राम इन चार अलग अलग प्रकार के खाद्य पदार्थों का. और मैं करने जा रहा हूँ एक दूसरी लाइन 
 पाइथन कोड का विभाजित करने के लिए प्रत्येक को चार कलमों में से उनके तत्स्थानी जोड़ से. यदि वह मौखिक वर्णन बहुत स्पष्ट नहीं था, आशा है कि यह और स्पष्ट ही जायेगा एक सेकंड में 
 जब हम पाइथन कोड में देखेंगे. तो यहाँ हम जुपिटर नोटबुक में हैं. मैं पहले ही लिख चुका हूँ पहला 
 भाग कोड का पहले से ही भरने के लिए मैट्रिक्स ए उनसे जो संख्याएं हमारे पास थीं 
अभी अभी, तो हम हिट करेंगे शिफ्ट एंटर और बस रन कर दो उसे, तो वह रही मैट्रिक्स ए. और अब यहाँ है दो लाइन्स पाइथन कोड की. पहले, हम कंप्यूट करने जा रहें हैं 
 टाउ बराबर ए, वह जोड़. और एक्स बराबर है ज़ीरो के मतलब जोड़ना है लम्ब रूप से. हम उसके बारे में और बात करेंगे थोड़ी देर में. और फिर प्रिंट कर दो कैल. तो हम जोड़ेंगे लम्ब रूप से. अब 59 है कुल संख्या कैलोरीज़ की सेब में, 239 थी कुल संख्या कैलोरीज़ की माँस में
और अण्डों में और आलुओं में और इसी तरह. और फिर परसेंटेज कंप्यूट करेंगे बराबर A/cal.reshape 1,4. असल में हम प्रतिशत चाहते हैं तो यहाँ 100 से गुणा कर दें. और तब चलों प्रतिशत प्रिंट करते हैं. चलों उसे रन करते हैं. और इसलिए वह कमांड हमने ली है मेट्रिक्स A और विभाजित किया है इसे इस एक बाई चार मेट्रिक्स से. तो यह देती है हमें प्रतिशत की मेट्रिक्स. तो हमने हाथ से किया था अभी ऊपर यहाँ था एक कॉलम 94.9% कैलरीज़ हैं कार्ब से. चलिए वापस स्लाइड्स पर चलते हैं. तो बस दो पंक्तियों को दोहराने के लिए 
कोड की जो हमारे पास था, तो यह है जो हमने लिखा था जुपिटर नोटबुक में. थोड़ा सा और विवरण जोड़ने के लिए यह पेरामिटर, (axis=0) का मतलब है कि आप चाहते है 
पाइथान खड़ा / लम्बवत योग करे. तो यदि x बराबर है ज़ीरो के मतलब जोड़ना है लम्ब रूप से. जबकि हॉरिज़ॉंटल ऐक्सिस है ऐक्सिस 1. ताकि लिख सके ऐक्सिस 1 या योग करना 
क्षैतिज रूप से बजाय लंब रूप से. और फिर यह कमांड यहाँ, यह है एक उदाहरण पाइथान ब्रॉडकास्टिंग 
का जहाँ आप लेते हैं एक मेट्रिक्स A. तो यह है एक तीन बाई चार मेट्रिक्स और आप 
विभाजित करते हैं इसे एक बाई चार मेट्रिक्स से. और तकनीकी तौर पर, कोड इस पहली पंक्ति के 
बाद, cal, वेरिएबल cal, है पहले से ही एक बाई चार मैट्रिक्स. तो तकनीकी रूप से आपको कॉल करने की 
ज़रूरत नहीं पड़ती reshape को यहाँ दोबारा, तो वह वास्तव में थोड़ा व्यर्थ है. लेकिन जब मैं लिख रहा हूँ पाइथान कोड्स 
यदि मुझे पूरी तरह यक़ीन नहीं है क्या मेट्रिक्स, क्या हैं डिमेन्शंज़ मेट्रिक्स की, मैं अक्सर कॉल करता हूँ 
reshape कमांड सिर्फ़ सुनिश्चित करने के लिए कि यह 
सही कॉलम वेक्टर या रो वेक्टर है या जो भी आप चाहते हैं इसे होना. reshape कमांड है एक कॉन्स्टंट टाइम. यह है एक ऑर्डर वन का ऑपरेशन और 
वह बहुत सुलभ है कॉल करना. तो संकोच न करें इस्तेमाल करने में reshape 
कमांड सुनिश्चित करने के लिए कि आपकी मेट्रिसीज़ उस साइज़ की हैं जो आप चाहते हैं. चलो अब थोड़ा विस्तार से समझाता हूँ कि कैसे 
इस तरह का ऑपरेशन काम करता है, ठीक है? तो यह है एक तीन बाई चार मेट्रिक्स और हमने 
विभाजित किया है इसे एक बाई चार मेट्रिक्स से. तो आप कैसे विभाजित करते हैं एक 
तीन बाई चार मेट्रिक्स को एक बाई चार मेट्रिक्स से? या एक बाई चार वेक्टर से? चलो देखते हैं कुछ और उदाहरण ब्रॉडकास्टिंग के. यदि आप लेते हैं एक 4 बाई 1 वेक्टर और 
जोड़ते हैं इसे एक नम्बर में, क्या पाइथान करेगा कि लेगा यह नम्बर और 
ऑटो-इक्स्पैंड करेगा इसे एक चार बाई एक वेक्टर निम्नलिखित रूप से. और इसलिए वेक्टर [1,2,3, 4] जमा नम्बर 100 बन जाता है वह वेक्टर दाईं तरफ़. तो आप जोड़ रहे हैं 100 प्रत्येक एलिमेंट को, 
और वास्तव में हम इस्तेमाल करते हैं यह फ़ॉर्म ब्रॉडकास्टिंग की जहाँ वह कॉन्स्टंट था 
पेरमिटर b पिछले एक वीडियो में. और इस तरह की ब्रॉडकास्टिंग काम करती है 
दोनो कॉलम वेक्टर और रो वेक्टर के साथ, और वास्तव में हम इस्तेमाल करते हैं 
एक समान फ़ॉर्म ब्रॉडकास्टिंग की पहले कॉन्स्टंट के साथ हम जोड़ रहे है एक वेक्टर में पेरामिटर b लॉजिस्टिक रेग्रेशन में. इधर एक और उदाहरण. मान लो आपके पास है एक दो बाई तीन मेट्रिक्स और तो आप जोड़ते हैं इसमें यह 1 बाई n मेट्रिक्स. तो सामान्य रूप होगा यदि आपके पास है कोई (m,n) मेट्रिक्स यहाँ और आप जोड़ते हैं इसमें एक (1,n) मेट्रिक्स. पाइथान क्या करेगा कि कॉपी करेगा मेट्रिक्स m बार बदलने के लिए इसे m बाई n मेट्रिक्स में, 
तो बजाय इस 1 बाई 3 मेट्रिक्स के, यह कॉपी करेगा इसे दो बार
 इस उदाहरण में बदलने के लिए इसे इसमें. तथा, 2 बाई 3 मेट्रिक्स और हम जोड़ेंगे इन्हें तो आपको मिलेगा योग दाईं तरफ़, ठीक है? तो आपने लिया, आपने जोड़ा 100 पहले कॉलम में, जोड़ा 200 दूसरे कॉलम में, जोड़ा 300 तीसरे कॉलम में. और यह है मूलरूप से जो हमने किया पिछली स्लाइड में, सिवाय कि हमने इस्तेमाल किया division ऑपरेशन 
बजाय इस्तेमाल करने के एक addition ऑपरेशन. तो एक आख़िरी उदाहरण,
 यदि आपके पास है एक (m,n) मेट्रिक्स और आप जोड़ते हैं इसे एक (m,1) वेक्टर, (m,1) मेट्रिक्स में. तब सिर्फ़ यह कॉपी होगा n बार क्षैतिज रूप से. तो आपको मिलेगी एक (m,n) मेट्रिक्स. तो जैसे कि आप कल्पना कर सकते हैं 
कॉपी करना इसे क्षैतिज रूप से तीन बार. और आप जोड़ते हैं उन्हें. तो जब आप जोड़ते हैं उन्हें आपको मिलेगा यह. तो हमने जोड़ा 100 पहली रो में, जोड़ा 200 दूसरी रो में. यह है अधिक सामान्य सिद्धांत ब्रॉड्कास्टिंग का पाइथान में. यदि आपके पास है एक (m,n) मेट्रिक्स और आप जोड़ते है या घटाते हैं या गुणा या विभाजित करते हैं 
इसे एक (1,n) मेट्रिक्स से, तब यह कॉपी करेगा इसे m बार एक (m,n) मेट्रिक्स में. और फिर अप्लाई करेगा जोड़, घटा, और गुणा या विभाजन प्रत्येक एलिमेंट पर. यदि इसके विपरीत, आपने ली होती एक (m,n) 
मेट्रिक्स और जोड़ना, घटाना, गुणा, विभाजन करना होता एक (m,1) मेट्रिक्स से, 
तब भी यह कॉपी करेगा इसे अब n बार. और बदलेगा इसे एक (m,n) मेट्रिक्स में और फिर
 अप्लाई करेगा ऑपरेशन प्रत्येक एलिमेंट पर. सिर्फ़ एक और फ़ॉर्म ब्रॉडकास्टिंग का,
 जो है यदि आपके पास है एक (m,1) मेट्रिक्स, तो वह वास्तव में है एक कॉलम वेक्टर जैसे [1,2,3], 
और आप जोड़ते हैं, घटाते है, गुणा या विभाजन करते हैं एक रियल नम्बर से. तो शायद एक (1, 1) मैट्रिक्स. तो जैसे वह जमा 100, तब आप कॉपी करेंगे यह रियल नम्बर n बार जब तक आपको नहीं 
मिलती एक और (n,1) मेट्रिक्स. और फिर आप करते हैं ऑपरेशन जैसे जोड़ 
इस उदाहरण में प्रत्येक एलिमेंट पर. और कुछ इसी प्रकार का काम करता है रो वेक्टर्ज़ के लिए. पूर्ण सामान्य वर्ज़न ब्रॉडकास्टिंग का 
कर सकता है थोड़ा इससे ज़्यादा भी. यदि आप रुचि रखते है आप प्रलेखन पढ़ सकते है numpy के लिए और देख सकते हैं 
ब्रॉडकास्टिंग उस प्रलेखन में. वह देता है थोड़ी और ज़्यादा सामान्य 
परिभाषा ब्रॉडकास्टिंग की. लेकिन जो स्लाइड पर हैं वे हैं मुख्य फ़ॉर्म्ज़ 
ब्रॉडकास्टिंग की जो आप को चाहिए इस्तेमाल करने के लिए जब आप
 इम्प्लमेंट करते हैं एक न्यूरल नेटवर्क. इससे पहले कि हम समाप्त करे, सिर्फ़ एक आख़िरी टिप्पणी, जो है आप में से उनके लिए जिनको आदत है प्रोग्रैमिंग की MATLAB या octave में, यदि आपने कभी इस्तेमाल किया है 
MATLAB या octave फ़ंक्शन bsxfun. न्यूरल नेटवर्क प्रोग्रामिंग में bsxfun कुछ इसी प्रकार 
का काम करता है, बिलकुल वैसा नहीं. लेकिन इसे अक्सर उसी उद्देश्य के लिए इस्तेमाल करते हैं
 जिसके लिए हम ब्रॉडकास्टिंग करते हैं पाइथान में. लेकिन यह वास्तव में सिर्फ़ बहुत उन्नत MATLAB और octave यूज़र्ज़ के लिए है, यदि आपने नहीं सुना है 
इसका, चिंता न करें इसकी. आपको नहीं जानने की आवश्यकता है इसकी जब 
आप कोड कर रहे हैं न्यूरल नेटवर्क्स पाइथान में. तो, वह था ब्रॉडकास्टिंग पाइथान में. मुझे आशा है कि जब आप प्रोग्रामिंग होमवर्क करेंगे 
वह ब्रॉडकास्टिंग आपको करने देगी न केवल आपका कोड जो तेज़ रन करेगा, लेकिन आपको सहायता भी करेगा जो आप 
करना चाहते है कुछ कोड्ज़ की लाइंज़ से. इससे पहले की आप प्रोग्रामिंग एक्सर्सायज़ में जाएँ, 
मैं साँझा करना चाहता हूँ आपके साथ सिर्फ़ एक और सेट आइडिया का, जो है कि कुछ सुझाव है और ट्रिक्स है जो मैंने ढूँढी हैं कम करती हैं बग्ज़ की
 संख्या को मेरे पाइथान कोड में और जो मैं आशा करता हूँ आपको भी मदद करेंगे. तो इसी के साथ, चलो बात करते हैं उस बारे में अगले वीडियो में.