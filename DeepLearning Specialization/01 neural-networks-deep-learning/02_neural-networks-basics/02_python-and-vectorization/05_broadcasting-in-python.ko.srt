1
00:00:00,210 --> 00:00:03,240
이번 비디오에선, broadcasting이라는 

2
00:00:03,240 --> 00:00:07,040
방법을 이용해서 파이썬의 코드를 더 빨리 운영할 
수 있다고 말씁드렸는데요.

3
00:00:07,040 --> 00:00:11,860
이번 비디오를 통해, 파이썬에서
broadcasting이 어떻게 작동되는지 
자세히 알아보겠습니다.

4
00:00:11,860 --> 00:00:14,240
broadcasting에 대한 내용을 예시로 설명 드리겠습니다.

5
00:00:14,240 --> 00:00:18,730
이 매트릭스에서는 탄수화물, 단백질, 그리고 지방에서의 

6
00:00:18,730 --> 00:00:22,320
칼로리를 각각의 음식 100g 별로 표현했습니다.

7
00:00:22,320 --> 00:00:25,380
예를 들어, 사과 100g 에서는

8
00:00:25,380 --> 00:00:29,690
56칼로리의 탄수화물, 그리고 더 훨씬 적은 양의 단백질과 지방이 검출됩니다. 

9
00:00:29,690 --> 00:00:35,110
반대로 100g의 소고기에서는
104g의 단백질, 135g의

10
00:00:35,110 --> 00:00:37,620
지방이 확인됩니다.

11
00:00:37,620 --> 00:00:43,330
자 이제 그럼 칼로리의 퍼센트를 

12
00:00:43,330 --> 00:00:48,440
각각 음식 별로 탄수화물, 단백질, 지방으로 나누어서 
계산하는 게 목표라고 해보죠. 

13
00:00:48,440 --> 00:00:52,338
예를 들어, 이 줄을 보면

14
00:00:52,338 --> 00:00:57,697
이 숫자를 모두 더할 경우, 100g 사과에서는

15
00:00:57,697 --> 00:01:02,580
56 더하기 1.2 더하기 59 칼로리입니다.

16
00:01:02,580 --> 00:01:06,806
칼로리의 퍼센트를 구하면

17
00:01:06,806 --> 00:01:11,800
탄수화물의 비율은 

18
00:01:11,800 --> 00:01:16,932
56 나누기 59이므로 약 94.9 퍼센트입니다.

19
00:01:16,932 --> 00:01:22,399
대부분이 칼로리는 탄수화물에서 오는 것이죠. 
반면에, 

20
00:01:22,399 --> 00:01:27,630
소고기에서는 대부분의 칼로리가 단백질과 지방에서 오는 것이고요. 

21
00:01:27,630 --> 00:01:33,630
그러므로 원하는 계산법은 매트릭스에서 모든 세로줄의 값을 더한 후, 

22
00:01:33,630 --> 00:01:38,740
100g의 사과, 소고기, 

23
00:01:38,740 --> 00:01:40,920
달걀, 감자에서 오는 총 칼로리를 계산하는 것입니다.

24
00:01:40,920 --> 00:01:45,090
매트릭스를 두고 나누면

25
00:01:47,230 --> 00:01:51,230
탄수화물, 단백질, 지방별로 

26
00:01:51,230 --> 00:01:54,870
그 퍼센트를 4가지 음식마다 구할 수 있습니다. 

27
00:01:54,870 --> 00:02:01,370
문제는, 이러한 방법을 일정한 for-loop가 없이
진행할 수 있을까요?

28
00:02:01,370 --> 00:02:03,290
어떻게 하는지 한번 보겠습니다.

29
00:02:04,450 --> 00:02:08,602
무엇을 할 것이냐면, 
이 매트릭스를 

30
00:02:08,602 --> 00:02:12,990
3 x 4 매트릭스인 A로 지정하겠습니다.

31
00:02:12,990 --> 00:02:18,300
그리고 1개의 파이썬 코드를 통해
세로줄을 더하게 할 것입니다.

32
00:02:18,300 --> 00:02:22,078
그러면 4가지 음식의 총 칼로리를 나타내는 

33
00:02:22,078 --> 00:02:25,046
4가지의 숫자가 나올 텐데요

34
00:02:25,046 --> 00:02:28,095
음식의 100g 당 나오는 칼로리입니다.

35
00:02:28,095 --> 00:02:32,113
2번째 파이썬 코드를 이용해 각각의 

36
00:02:32,113 --> 00:02:35,390
세로줄을 각각의 합으로 나눌 것입니다.

37
00:02:35,390 --> 00:02:37,250
구두로 설명한 내용이 잘 이해가 안되시면, 

38
00:02:37,250 --> 00:02:40,670
파이썬 code를 통해 조금 후에 더 자세히 설명드릴 것입니다.

39
00:02:40,670 --> 00:02:42,460
여기 Jupiter notebook에서

40
00:02:42,460 --> 00:02:46,150
이미 첫 번째 코드를 적었는데요 

41
00:02:46,150 --> 00:02:49,860
방금 A 매트릭스 숫자를 적용시키고, 
shift+enter를 누르겠습니다.

42
00:02:49,860 --> 00:02:51,220
run하면 A 매트릭스가 나옵니다. 

43
00:02:51,220 --> 00:02:55,080
이제 2번째 파이썬 코드인데요, 

44
00:02:55,080 --> 00:02:59,983
첫 번째는 cal = a.sum

45
00:02:59,983 --> 00:03:02,280
그리고 axis = 0을 기입하겠습니다. 세로로 더하기 위한 방법이죠. 

46
00:03:02,280 --> 00:03:05,280
조금 후에 보도록 하겠습니다.

47
00:03:05,280 --> 00:03:06,076
그리고 print cal을 입력합니다.

48
00:03:06,076 --> 00:03:07,825
세로로 더할 건데요.

49
00:03:07,825 --> 00:03:13,735
그러면 59는 사과의 총 칼로리이고, 

50
00:03:13,735 --> 00:03:19,575
239칼로리는 소고기의 총 칼로리이고, 
달걀과 감자도 이렇습니다.

51
00:03:19,575 --> 00:03:25,151
이제 퍼센트 계산인데요, 

52
00:03:25,151 --> 00:03:30,733
퍼센트를 A 나누기 cal.reshape 1, 4로 지정합니다.

53
00:03:30,733 --> 00:03:33,927
사실 퍼센트 백분율로 원하기 때문에 
100을 여기에 곱해주겠습니다.

54
00:03:35,913 --> 00:03:38,860
그럼 이제 print percentage 해줍니다.

55
00:03:40,800 --> 00:03:41,950
이걸 run 해보죠, 

56
00:03:41,950 --> 00:03:46,870
이 명령을 통해서 A 매트릭스 갖고

57
00:03:46,870 --> 00:03:50,820
1 x 4 매트릭스로 나누었습니다.

58
00:03:50,820 --> 00:03:52,672
이렇게 하면 퍼센트의 매트릭스를 줍니다.

59
00:03:52,672 --> 00:03:57,327
아까 직접 저희가 계산했듯이

60
00:03:57,327 --> 00:04:02,480
세로줄에서 사과는 첫번째 줄에서
총 칼로리 중 94.9퍼센트가 탄수화물이었습니다.

61
00:04:02,480 --> 00:04:04,000
다시 슬라이드로 돌아가보겠습니다.

62
00:04:04,000 --> 00:04:06,310
2개의 코드를 다시 반복하면 

63
00:04:06,310 --> 00:04:09,940
Jupiter notebook에 적은 내용은 이렇습니다.

64
00:04:09,940 --> 00:04:13,306
더 상세히 이야기하자면, 

65
00:04:13,306 --> 00:04:18,540
(axis = 0)라는 매개변수는 파이썬이
세로로 값을 더하라고 하는 것인데요

66
00:04:18,540 --> 00:04:21,567
세로로 값을 더하라고 하는 것인데요

67
00:04:21,567 --> 00:04:24,029
반대로 axis가 1이면

68
00:04:24,029 --> 00:04:28,050
세로가 아닌 가로로 그 값을 더하라는 것입니다.

69
00:04:28,050 --> 00:04:30,670
그리고 이 명령어는 

70
00:04:30,670 --> 00:04:35,210
파이썬 broadcasting의 예입니다. 
A 매트릭스를 가지고

71
00:04:35,210 --> 00:04:43,330
3 x 4 매트릭스죠, 
이것을 1 x 4 매크릭스로 나눕니다.

72
00:04:43,330 --> 00:04:47,370
엄밀히 이야기하면, 첫번째 코드 이후, 
cal, 변수인 cal이죠, 

73
00:04:47,370 --> 00:04:49,590
이미 1 x 4 매트릭습니다.

74
00:04:49,590 --> 00:04:52,616
즉, 여기서는 reshape을 부를 필요가 없습니다.

75
00:04:52,616 --> 00:04:54,722
여기서는 약간 쓸모가 없죠. 

76
00:04:54,722 --> 00:04:59,140
그러나 만약에 파이썬 codes코드를 
쓸때, 매트릭스의 다이멘션을 잘 모르는 경우 

77
00:04:59,140 --> 00:05:04,056
reshape 명령어를 그냥 놔둡니다.

78
00:05:04,056 --> 00:05:07,833
세로줄인지, 가로줄인지, 

79
00:05:07,833 --> 00:05:09,500
어떤 줄이던 제대로 지정하기 위해서죠.

80
00:05:09,500 --> 00:05:11,840
reshape 명령은 일정 시간인데요. 

81
00:05:11,840 --> 00:05:15,150
order one operation이기 때문에 부르는데 굉장히 cheap합니다. 

82
00:05:15,150 --> 00:05:18,404
그러므로 reshape 명령을 마음껏 사용하셔서 

83
00:05:18,404 --> 00:05:20,830
매트릭스의 크기를 잘 맞추시길 바랍니다.

84
00:05:21,920 --> 00:05:27,272
자 그럼 이제 이러한 operation이 어떻게 작동하는지 
더 자세히 알아보겠습니다

85
00:05:27,272 --> 00:05:33,780
우리는 3 x 4 매트릭스를 1 x 4 매트릭스로 
나누었었는데요, 

86
00:05:33,780 --> 00:05:37,840
어떻게 3 x 4 매트릭스를 1 x 4 매트릭스로 나눌까요? 

87
00:05:37,840 --> 00:05:38,860
또는 1 x 4 벡터로 말이죠

88
00:05:40,130 --> 00:05:43,160
broadcasting에 대한 몇 가지 다른 예를 보겠습니다.

89
00:05:43,160 --> 00:05:47,920
4 x 1 벡터를 가지고 숫자에 더하면 

90
00:05:47,920 --> 00:05:53,011
파이썬은 이 숫자를 자동으로

91
00:05:53,011 --> 00:05:58,180
4 x 1 벡터로 보기와 같이 자동 확장 시킬 것입니다.

92
00:05:58,180 --> 00:06:00,257
그러면 벡터 [1, 2, 3, 4] 더하기

93
00:06:00,257 --> 00:06:04,450
100은 오른쪽과 같은 벡터가 되는 것이죠. 

94
00:06:04,450 --> 00:06:09,280
100을 모든 요소에 더하는 것입니다.

95
00:06:09,280 --> 00:06:14,365
이번 비디오에 봤던, 이런 경우의 broadcasting 을, 상수가 
매개변수 b였던 때 사용합니다.

96
00:06:14,365 --> 00:06:19,414
이런 유형의 broadcasting은 세로 벡터나
가로 벡터에 모두 사용됩니다.

97
00:06:19,414 --> 00:06:24,157
이런 비슷한 broadcasting을 이전에도

98
00:06:24,157 --> 00:06:29,330
파라미터인 b를 상수로 더하는 경우도 
로지스틱 회귀분석의 경우에 다룬 적이 있죠. 또 다른 예시를 보여드리겠습니다.

99
00:06:29,330 --> 00:06:31,610
또 하나의 예제를 보도록 합시다.

100
00:06:31,610 --> 00:06:35,900
2 x 3 매트릭스가 있다고 해보겠습니다.

101
00:06:35,900 --> 00:06:39,420
여기에 1개의 n 매트릭스를 더합니다.

102
00:06:40,950 --> 00:06:45,682
일반적인 케이스의 경우, 

103
00:06:45,682 --> 00:06:50,583
(m, n) 매트릭스가 있고, 

104
00:06:50,583 --> 00:06:55,330
(1, n) 매트릭스를 더하는 것일 텐데요.

105
00:06:55,330 --> 00:06:58,667
파이썬은 일단 matrix을 m번 복사해서

106
00:06:58,667 --> 00:07:03,672
m x n 매트릭스를 만들 것입니다.

107
00:07:03,672 --> 00:07:09,980
그러므로 이 1 x 3 매트릭스 대신에 
이번 보기에서는 2번 복사해서 
이렇게 변형시킬 것입니다.

108
00:07:09,980 --> 00:07:14,092
2 x 3 매트릭스로하고

109
00:07:14,092 --> 00:07:18,270
합쳐진 오른쪽의 값이 나올 것입니다. 아시겠죠? 

110
00:07:18,270 --> 00:07:21,583
이 값을 가지고 100을 첫 번째 세로줄에 더하고

111
00:07:21,583 --> 00:07:25,812
2번째 세로줄에 200을 더하고, 
300을 3번째 줄에 더해줬습니다.

112
00:07:25,812 --> 00:07:28,796
이전 슬라이드에서도 이와 같이 풀었는데요, 

113
00:07:28,796 --> 00:07:32,810
더하기를 하는 것 대신에, 이전에는
나누기를 한 것이죠. 

114
00:07:34,180 --> 00:07:40,402
마지막 예로, 
(m, n) 매트릭스에 (m, 1) 벡터를 더하거나

115
00:07:40,402 --> 00:07:46,260
(m, 1) 매트릭스를 더할 수 있습니다.

116
00:07:47,310 --> 00:07:50,760
이런 경우, 이것을 n 번 가로로 곱하고, 

117
00:07:50,760 --> 00:07:53,510
그러면 (m, n) 매트릭스가 나옵니다.

118
00:07:53,510 --> 00:07:56,990
가로로 3번 복사된다고 상상하시면 되는데요.

119
00:07:56,990 --> 00:07:58,650
이 값들을 더해줍니다.

120
00:07:58,650 --> 00:08:01,070
이 값들을 더하면 이 값이 나옵니다.

121
00:08:01,070 --> 00:08:06,890
첫 번째 줄에 100을 더했고, 2번째 줄에 200을 더했습니다.

122
00:08:08,270 --> 00:08:12,061
이것은 파이썬에서의 일반적인 broadcasting 원리인데요. 

123
00:08:12,061 --> 00:08:17,353
(m, n) 매트릭스가 있고 (1, n) 매트릭스를 더하거나

124
00:08:17,353 --> 00:08:24,409
빼거나 곱하거나 나누면 

125
00:08:24,409 --> 00:08:31,177
(m, n) 매트릭스에 이것을 n번 복사합니다. 

126
00:08:31,177 --> 00:08:33,781
그렇게 해서 더하기, 빼기, 

127
00:08:33,781 --> 00:08:36,140
곱하기 또는 나누기의 요소를 적용시켜줍니다.

128
00:08:37,250 --> 00:08:42,250
반대로 (m, n)매트릭스를 가지고 (m, 1) 매트릭스를

129
00:08:42,250 --> 00:08:49,060
더하거나, 빼거나, 곱하거나, 나우면 
이것 또한 n번 복사할 것입니다.

130
00:08:49,060 --> 00:08:54,740
그렇게해서 (m, n) 매트릭스로 변형한 다음
operation element wise 적용할 것입니다.

131
00:08:54,740 --> 00:09:00,327
broadcasting중 하나인데요, 
즉, (m, 1) 매트릭스가 있으면, 

132
00:09:00,327 --> 00:09:05,175
세로 벡터인데요 [1, 2, 3] 처럼요, 그리고 더하거나

133
00:09:05,175 --> 00:09:08,482
빼거나, 곱하거나, 나눠줍니다. 줄 숫자 별로요

134
00:09:08,482 --> 00:09:11,080
(1, 1)매트릭를 적용시킬 수도 있죠, 

135
00:09:11,080 --> 00:09:16,117
더하기 100을 하면

136
00:09:16,117 --> 00:09:23,512
(n, 1)매트릭스가 나올 때까지 이 실수를 n번 복사합니다. 

137
00:09:23,512 --> 00:09:29,700
이 예제에서는 더하기와 같은 절차를 element-wise 진행합니다.

138
00:09:29,700 --> 00:09:35,823
가끔씩은 row 벡터에도 비슷하게 적용됩니다. 

139
00:09:38,281 --> 00:09:43,730
일반적인 broadcasting 버전은 이거보다 조금 더 할 수 있습니다.

140
00:09:43,730 --> 00:09:49,080
관심이 있으시면, 넘파이 관련 자료를
찾으셔서

141
00:09:49,080 --> 00:09:52,240
broadcasting에 대한 부분을 읽으실 수 있습니다.

142
00:09:52,240 --> 00:09:56,380
오히려 더 broadcasting의 일반적인 정의라고 할 수 있는데요.

143
00:09:56,380 --> 00:10:00,140
이 슬라이드 내용이 주요 broadcasting 유형입니다.

144
00:10:00,140 --> 00:10:02,560
신경망을 도입할 때 사용하는 주요 broadcasting 유형이죠.

145
00:10:03,890 --> 00:10:06,840
끝내기 이전에, 마지막으로 말씀드리자면, 

146
00:10:06,840 --> 00:10:10,210
MATLAB이나 Octave에서 프로그래밍을 하시는 분

147
00:10:10,210 --> 00:10:15,760
같은 경우에, bsxfun 함수를 써보셨으면

148
00:10:15,760 --> 00:10:20,590
신경망 분야에서도 bsxfun 가 다르긴 하지만
비슷하게 작동하는 부분이 있습니다. 

149
00:10:20,590 --> 00:10:25,750
bsxfun 함수가 파이썬에서의 broadcasting 과 
비슷한 목적으로 자주 쓰이는데요.

150
00:10:25,750 --> 00:10:28,505
물론 아주 상급 MATLAB 이나 Octave 

151
00:10:28,505 --> 00:10:31,600
유저들만 알 수 있습니다만, 들어보신 적이 없으시면, 
걱정 안 하셔도 됩니다. 

152
00:10:31,600 --> 00:10:35,524
파이썬에서 신경망을 코딩하는데는 필요가 없기 때문입니다.

153
00:10:35,524 --> 00:10:38,720
자, 파이썬에서 broadcasting에 대한 내용을 다루어 보았는데요. 

154
00:10:38,720 --> 00:10:42,360
여러분이 프로그래밍 숙제를 하실 때, broadcasting이 

155
00:10:42,360 --> 00:10:44,580
코드를 빨리 실행되게 해줄 뿐 아니라, 

156
00:10:44,580 --> 00:10:48,920
더 간략한 code 라인을 통해 원하는 것을 수행시켜주기 바랍니다. 

157
00:10:50,360 --> 00:10:53,630
프로그래밍 연습 학습을 시작하기에 앞서, 

158
00:10:53,630 --> 00:10:56,290
또 다른 아이디어를 공유하고 싶은데요

159
00:10:56,290 --> 00:11:00,700
파이썬 코드에서 버그를 줄이는 방법에 대해서 

160
00:11:00,700 --> 00:11:02,640
개인적으로 큰 도움 됐었던 팁과 요령을 공유하겠습니다. 여러분에게 도움이 됐으면 좋겠습

161
00:11:02,640 --> 00:11:05,550
자 그럼 이제 관련 내용은 다음 비디오에서 다루도록 하겠습니다.